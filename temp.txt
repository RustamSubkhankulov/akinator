# 1 "akinator/akinator.cpp"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/usr/include/stdc-predef.h" 1 3 4
# 1 "<command-line>" 2
# 1 "akinator/akinator.cpp"
# 1 "/usr/include/ctype.h" 1 3 4
# 25 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/features.h" 1 3 4
# 461 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 1 3 4
# 452 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 453 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 454 "/usr/include/x86_64-linux-gnu/sys/cdefs.h" 2 3 4
# 462 "/usr/include/features.h" 2 3 4
# 485 "/usr/include/features.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/gnu/stubs-64.h" 1 3 4
# 11 "/usr/include/x86_64-linux-gnu/gnu/stubs.h" 2 3 4
# 486 "/usr/include/features.h" 2 3 4
# 26 "/usr/include/ctype.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/timesize.h" 1 3 4
# 29 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4



# 31 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
typedef unsigned char __u_char;
typedef unsigned short int __u_short;
typedef unsigned int __u_int;
typedef unsigned long int __u_long;


typedef signed char __int8_t;
typedef unsigned char __uint8_t;
typedef signed short int __int16_t;
typedef unsigned short int __uint16_t;
typedef signed int __int32_t;
typedef unsigned int __uint32_t;

typedef signed long int __int64_t;
typedef unsigned long int __uint64_t;






typedef __int8_t __int_least8_t;
typedef __uint8_t __uint_least8_t;
typedef __int16_t __int_least16_t;
typedef __uint16_t __uint_least16_t;
typedef __int32_t __int_least32_t;
typedef __uint32_t __uint_least32_t;
typedef __int64_t __int_least64_t;
typedef __uint64_t __uint_least64_t;



typedef long int __quad_t;
typedef unsigned long int __u_quad_t;







typedef long int __intmax_t;
typedef unsigned long int __uintmax_t;
# 141 "/usr/include/x86_64-linux-gnu/bits/types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/typesizes.h" 1 3 4
# 142 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/time64.h" 1 3 4
# 143 "/usr/include/x86_64-linux-gnu/bits/types.h" 2 3 4


typedef unsigned long int __dev_t;
typedef unsigned int __uid_t;
typedef unsigned int __gid_t;
typedef unsigned long int __ino_t;
typedef unsigned long int __ino64_t;
typedef unsigned int __mode_t;
typedef unsigned long int __nlink_t;
typedef long int __off_t;
typedef long int __off64_t;
typedef int __pid_t;
typedef struct { int __val[2]; } __fsid_t;
typedef long int __clock_t;
typedef unsigned long int __rlim_t;
typedef unsigned long int __rlim64_t;
typedef unsigned int __id_t;
typedef long int __time_t;
typedef unsigned int __useconds_t;
typedef long int __suseconds_t;

typedef int __daddr_t;
typedef int __key_t;


typedef int __clockid_t;


typedef void * __timer_t;


typedef long int __blksize_t;




typedef long int __blkcnt_t;
typedef long int __blkcnt64_t;


typedef unsigned long int __fsblkcnt_t;
typedef unsigned long int __fsblkcnt64_t;


typedef unsigned long int __fsfilcnt_t;
typedef unsigned long int __fsfilcnt64_t;


typedef long int __fsword_t;

typedef long int __ssize_t;


typedef long int __syscall_slong_t;

typedef unsigned long int __syscall_ulong_t;



typedef __off64_t __loff_t;
typedef char *__caddr_t;


typedef long int __intptr_t;


typedef unsigned int __socklen_t;




typedef int __sig_atomic_t;
# 27 "/usr/include/ctype.h" 2 3 4

extern "C" {
# 39 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endian.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/endianness.h" 1 3 4
# 36 "/usr/include/x86_64-linux-gnu/bits/endian.h" 2 3 4
# 40 "/usr/include/ctype.h" 2 3 4






enum
{
  _ISupper = ((0) < 8 ? ((1 << (0)) << 8) : ((1 << (0)) >> 8)),
  _ISlower = ((1) < 8 ? ((1 << (1)) << 8) : ((1 << (1)) >> 8)),
  _ISalpha = ((2) < 8 ? ((1 << (2)) << 8) : ((1 << (2)) >> 8)),
  _ISdigit = ((3) < 8 ? ((1 << (3)) << 8) : ((1 << (3)) >> 8)),
  _ISxdigit = ((4) < 8 ? ((1 << (4)) << 8) : ((1 << (4)) >> 8)),
  _ISspace = ((5) < 8 ? ((1 << (5)) << 8) : ((1 << (5)) >> 8)),
  _ISprint = ((6) < 8 ? ((1 << (6)) << 8) : ((1 << (6)) >> 8)),
  _ISgraph = ((7) < 8 ? ((1 << (7)) << 8) : ((1 << (7)) >> 8)),
  _ISblank = ((8) < 8 ? ((1 << (8)) << 8) : ((1 << (8)) >> 8)),
  _IScntrl = ((9) < 8 ? ((1 << (9)) << 8) : ((1 << (9)) >> 8)),
  _ISpunct = ((10) < 8 ? ((1 << (10)) << 8) : ((1 << (10)) >> 8)),
  _ISalnum = ((11) < 8 ? ((1 << (11)) << 8) : ((1 << (11)) >> 8))
};
# 79 "/usr/include/ctype.h" 3 4
extern const unsigned short int **__ctype_b_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_tolower_loc (void)
     throw () __attribute__ ((__const__));
extern const __int32_t **__ctype_toupper_loc (void)
     throw () __attribute__ ((__const__));
# 108 "/usr/include/ctype.h" 3 4
extern int isalnum (int) throw ();
extern int isalpha (int) throw ();
extern int iscntrl (int) throw ();
extern int isdigit (int) throw ();
extern int islower (int) throw ();
extern int isgraph (int) throw ();
extern int isprint (int) throw ();
extern int ispunct (int) throw ();
extern int isspace (int) throw ();
extern int isupper (int) throw ();
extern int isxdigit (int) throw ();



extern int tolower (int __c) throw ();


extern int toupper (int __c) throw ();




extern int isblank (int) throw ();




extern int isctype (int __c, int __mask) throw ();






extern int isascii (int __c) throw ();



extern int toascii (int __c) throw ();



extern int _toupper (int) throw ();
extern int _tolower (int) throw ();
# 237 "/usr/include/ctype.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 1 3 4
# 28 "/usr/include/x86_64-linux-gnu/bits/types/__locale_t.h" 3 4
struct __locale_struct
{

  struct __locale_data *__locales[13];


  const unsigned short int *__ctype_b;
  const int *__ctype_tolower;
  const int *__ctype_toupper;


  const char *__names[13];
};

typedef struct __locale_struct *__locale_t;
# 23 "/usr/include/x86_64-linux-gnu/bits/types/locale_t.h" 2 3 4

typedef __locale_t locale_t;
# 238 "/usr/include/ctype.h" 2 3 4
# 251 "/usr/include/ctype.h" 3 4
extern int isalnum_l (int, locale_t) throw ();
extern int isalpha_l (int, locale_t) throw ();
extern int iscntrl_l (int, locale_t) throw ();
extern int isdigit_l (int, locale_t) throw ();
extern int islower_l (int, locale_t) throw ();
extern int isgraph_l (int, locale_t) throw ();
extern int isprint_l (int, locale_t) throw ();
extern int ispunct_l (int, locale_t) throw ();
extern int isspace_l (int, locale_t) throw ();
extern int isupper_l (int, locale_t) throw ();
extern int isxdigit_l (int, locale_t) throw ();

extern int isblank_l (int, locale_t) throw ();



extern int __tolower_l (int __c, locale_t __l) throw ();
extern int tolower_l (int __c, locale_t __l) throw ();


extern int __toupper_l (int __c, locale_t __l) throw ();
extern int toupper_l (int __c, locale_t __l) throw ();
# 327 "/usr/include/ctype.h" 3 4
}
# 2 "akinator/akinator.cpp" 2
# 1 "/usr/include/string.h" 1 3 4
# 26 "/usr/include/string.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/string.h" 2 3 4

extern "C" {




# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 209 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long unsigned int size_t;
# 34 "/usr/include/string.h" 2 3 4
# 43 "/usr/include/string.h" 3 4
extern void *memcpy (void *__restrict __dest, const void *__restrict __src,
       size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern void *memmove (void *__dest, const void *__src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern void *memccpy (void *__restrict __dest, const void *__restrict __src,
        int __c, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *memset (void *__s, int __c, size_t __n) throw () __attribute__ ((__nonnull__ (1)));


extern int memcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));



extern "C++"
{
extern void *memchr (void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const void *memchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 89 "/usr/include/string.h" 3 4
}
# 99 "/usr/include/string.h" 3 4
extern "C++" void *rawmemchr (void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *rawmemchr (const void *__s, int __c)
     throw () __asm ("rawmemchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));







extern "C++" void *memrchr (void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const void *memrchr (const void *__s, int __c, size_t __n)
      throw () __asm ("memrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 122 "/usr/include/string.h" 3 4
extern char *strcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern char *strcat (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));

extern char *strncat (char *__restrict __dest, const char *__restrict __src,
        size_t __n) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int strcmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern int strncmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strcoll (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));

extern size_t strxfrm (char *__restrict __dest,
         const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (2)));






extern int strcoll_l (const char *__s1, const char *__s2, locale_t __l)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));


extern size_t strxfrm_l (char *__dest, const char *__src, size_t __n,
    locale_t __l) throw () __attribute__ ((__nonnull__ (2, 4)));





extern char *strdup (const char *__s)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));






extern char *strndup (const char *__string, size_t __n)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__nonnull__ (1)));
# 204 "/usr/include/string.h" 3 4
extern "C++"
{
extern char *strchr (char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strchr (const char *__s, int __c)
     throw () __asm ("strchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 224 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strrchr (char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *strrchr (const char *__s, int __c)
     throw () __asm ("strrchr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 251 "/usr/include/string.h" 3 4
}
# 261 "/usr/include/string.h" 3 4
extern "C++" char *strchrnul (char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern "C++" const char *strchrnul (const char *__s, int __c)
     throw () __asm ("strchrnul") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 273 "/usr/include/string.h" 3 4
extern size_t strcspn (const char *__s, const char *__reject)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern size_t strspn (const char *__s, const char *__accept)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern "C++"
{
extern char *strpbrk (char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strpbrk (const char *__s, const char *__accept)
     throw () __asm ("strpbrk") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 301 "/usr/include/string.h" 3 4
}






extern "C++"
{
extern char *strstr (char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern const char *strstr (const char *__haystack, const char *__needle)
     throw () __asm ("strstr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 328 "/usr/include/string.h" 3 4
}







extern char *strtok (char *__restrict __s, const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (2)));



extern char *__strtok_r (char *__restrict __s,
    const char *__restrict __delim,
    char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));

extern char *strtok_r (char *__restrict __s, const char *__restrict __delim,
         char **__restrict __save_ptr)
     throw () __attribute__ ((__nonnull__ (2, 3)));





extern "C++" char *strcasestr (char *__haystack, const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
extern "C++" const char *strcasestr (const char *__haystack,
         const char *__needle)
     throw () __asm ("strcasestr") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));
# 369 "/usr/include/string.h" 3 4
extern void *memmem (const void *__haystack, size_t __haystacklen,
       const void *__needle, size_t __needlelen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 3)));



extern void *__mempcpy (void *__restrict __dest,
   const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern void *mempcpy (void *__restrict __dest,
        const void *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern size_t strlen (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern size_t strnlen (const char *__string, size_t __maxlen)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));




extern char *strerror (int __errnum) throw ();
# 421 "/usr/include/string.h" 3 4
extern char *strerror_r (int __errnum, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2))) ;





extern char *strerror_l (int __errnum, locale_t __l) throw ();



# 1 "/usr/include/strings.h" 1 3 4
# 23 "/usr/include/strings.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 24 "/usr/include/strings.h" 2 3 4






extern "C" {



extern int bcmp (const void *__s1, const void *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern void bcopy (const void *__src, void *__dest, size_t __n)
  throw () __attribute__ ((__nonnull__ (1, 2)));


extern void bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern "C++"
{
extern char *index (char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *index (const char *__s, int __c)
     throw () __asm ("index") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 66 "/usr/include/strings.h" 3 4
}







extern "C++"
{
extern char *rindex (char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
extern const char *rindex (const char *__s, int __c)
     throw () __asm ("rindex") __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1)));
# 94 "/usr/include/strings.h" 3 4
}
# 104 "/usr/include/strings.h" 3 4
extern int ffs (int __i) throw () __attribute__ ((__const__));





extern int ffsl (long int __l) throw () __attribute__ ((__const__));
__extension__ extern int ffsll (long long int __ll)
     throw () __attribute__ ((__const__));



extern int strcasecmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern int strncasecmp (const char *__s1, const char *__s2, size_t __n)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));






extern int strcasecmp_l (const char *__s1, const char *__s2, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 3)));



extern int strncasecmp_l (const char *__s1, const char *__s2,
     size_t __n, locale_t __loc)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2, 4)));


}
# 433 "/usr/include/string.h" 2 3 4



extern void explicit_bzero (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));



extern char *strsep (char **__restrict __stringp,
       const char *__restrict __delim)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern char *strsignal (int __sig) throw ();


extern char *__stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpcpy (char *__restrict __dest, const char *__restrict __src)
     throw () __attribute__ ((__nonnull__ (1, 2)));



extern char *__stpncpy (char *__restrict __dest,
   const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern char *stpncpy (char *__restrict __dest,
        const char *__restrict __src, size_t __n)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern int strverscmp (const char *__s1, const char *__s2)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1, 2)));


extern char *strfry (char *__string) throw () __attribute__ ((__nonnull__ (1)));


extern void *memfrob (void *__s, size_t __n) throw () __attribute__ ((__nonnull__ (1)));







extern "C++" char *basename (char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
extern "C++" const char *basename (const char *__filename)
     throw () __asm ("basename") __attribute__ ((__nonnull__ (1)));
# 499 "/usr/include/string.h" 3 4
}
# 3 "akinator/akinator.cpp" 2
# 1 "/usr/include/c++/9/stdlib.h" 1 3
# 36 "/usr/include/c++/9/stdlib.h" 3
# 1 "/usr/include/c++/9/cstdlib" 1 3
# 39 "/usr/include/c++/9/cstdlib" 3
       
# 40 "/usr/include/c++/9/cstdlib" 3

# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 1 3
# 252 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  typedef long unsigned int size_t;
  typedef long int ptrdiff_t;


  typedef decltype(nullptr) nullptr_t;

}
# 274 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
namespace std
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
namespace __gnu_cxx
{
  inline namespace __cxx11 __attribute__((__abi_tag__ ("cxx11"))) { }
}
# 524 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 3
# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/os_defines.h" 1 3
# 525 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3


# 1 "/usr/include/x86_64-linux-gnu/c++/9/bits/cpu_defines.h" 1 3
# 528 "/usr/include/x86_64-linux-gnu/c++/9/bits/c++config.h" 2 3
# 42 "/usr/include/c++/9/cstdlib" 2 3
# 75 "/usr/include/c++/9/cstdlib" 3
# 1 "/usr/include/stdlib.h" 1 3 4
# 25 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 26 "/usr/include/stdlib.h" 2 3 4





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 32 "/usr/include/stdlib.h" 2 3 4

extern "C" {





# 1 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 1 3 4
# 52 "/usr/include/x86_64-linux-gnu/bits/waitflags.h" 3 4
typedef enum
{
  P_ALL,
  P_PID,
  P_PGID
} idtype_t;
# 40 "/usr/include/stdlib.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/waitstatus.h" 1 3 4
# 41 "/usr/include/stdlib.h" 2 3 4
# 55 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 1 3 4
# 75 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef _Complex float __cfloat128 __attribute__ ((__mode__ (__TC__)));
# 87 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
typedef __float128 _Float128;
# 120 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/long-double.h" 1 3 4
# 25 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 2 3 4
# 214 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef float _Float32;
# 251 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float64;
# 268 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef double _Float32x;
# 285 "/usr/include/x86_64-linux-gnu/bits/floatn-common.h" 3 4
typedef long double _Float64x;
# 121 "/usr/include/x86_64-linux-gnu/bits/floatn.h" 2 3 4
# 56 "/usr/include/stdlib.h" 2 3 4


typedef struct
  {
    int quot;
    int rem;
  } div_t;



typedef struct
  {
    long int quot;
    long int rem;
  } ldiv_t;





__extension__ typedef struct
  {
    long long int quot;
    long long int rem;
  } lldiv_t;
# 97 "/usr/include/stdlib.h" 3 4
extern size_t __ctype_get_mb_cur_max (void) throw () ;



extern double atof (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern int atoi (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;

extern long int atol (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



__extension__ extern long long int atoll (const char *__nptr)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;



extern double strtod (const char *__restrict __nptr,
        char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern float strtof (const char *__restrict __nptr,
       char **__restrict __endptr) throw () __attribute__ ((__nonnull__ (1)));

extern long double strtold (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 140 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64 strtof64 (const char *__restrict __nptr,
     char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float128 strtof128 (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float32x strtof32x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));



extern _Float64x strtof64x (const char *__restrict __nptr,
       char **__restrict __endptr)
     throw () __attribute__ ((__nonnull__ (1)));
# 176 "/usr/include/stdlib.h" 3 4
extern long int strtol (const char *__restrict __nptr,
   char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

extern unsigned long int strtoul (const char *__restrict __nptr,
      char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));



__extension__
extern long long int strtoq (const char *__restrict __nptr,
        char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtouq (const char *__restrict __nptr,
           char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




__extension__
extern long long int strtoll (const char *__restrict __nptr,
         char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));

__extension__
extern unsigned long long int strtoull (const char *__restrict __nptr,
     char **__restrict __endptr, int __base)
     throw () __attribute__ ((__nonnull__ (1)));




extern int strfromd (char *__dest, size_t __size, const char *__format,
       double __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfromf (char *__dest, size_t __size, const char *__format,
       float __f)
     throw () __attribute__ ((__nonnull__ (3)));

extern int strfroml (char *__dest, size_t __size, const char *__format,
       long double __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 232 "/usr/include/stdlib.h" 3 4
extern int strfromf32 (char *__dest, size_t __size, const char * __format,
         _Float32 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64 (char *__dest, size_t __size, const char * __format,
         _Float64 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf128 (char *__dest, size_t __size, const char * __format,
   _Float128 __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf32x (char *__dest, size_t __size, const char * __format,
   _Float32x __f)
     throw () __attribute__ ((__nonnull__ (3)));



extern int strfromf64x (char *__dest, size_t __size, const char * __format,
   _Float64x __f)
     throw () __attribute__ ((__nonnull__ (3)));
# 274 "/usr/include/stdlib.h" 3 4
extern long int strtol_l (const char *__restrict __nptr,
     char **__restrict __endptr, int __base,
     locale_t __loc) throw () __attribute__ ((__nonnull__ (1, 4)));

extern unsigned long int strtoul_l (const char *__restrict __nptr,
        char **__restrict __endptr,
        int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern long long int strtoll_l (const char *__restrict __nptr,
    char **__restrict __endptr, int __base,
    locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

__extension__
extern unsigned long long int strtoull_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       int __base, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 4)));

extern double strtod_l (const char *__restrict __nptr,
   char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern float strtof_l (const char *__restrict __nptr,
         char **__restrict __endptr, locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));

extern long double strtold_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 316 "/usr/include/stdlib.h" 3 4
extern _Float32 strtof32_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64 strtof64_l (const char *__restrict __nptr,
       char **__restrict __endptr,
       locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float128 strtof128_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float32x strtof32x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));



extern _Float64x strtof64x_l (const char *__restrict __nptr,
         char **__restrict __endptr,
         locale_t __loc)
     throw () __attribute__ ((__nonnull__ (1, 3)));
# 385 "/usr/include/stdlib.h" 3 4
extern char *l64a (long int __n) throw () ;


extern long int a64l (const char *__s)
     throw () __attribute__ ((__pure__)) __attribute__ ((__nonnull__ (1))) ;




# 1 "/usr/include/x86_64-linux-gnu/sys/types.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
extern "C" {





typedef __u_char u_char;
typedef __u_short u_short;
typedef __u_int u_int;
typedef __u_long u_long;
typedef __quad_t quad_t;
typedef __u_quad_t u_quad_t;
typedef __fsid_t fsid_t;


typedef __loff_t loff_t;




typedef __ino_t ino_t;






typedef __ino64_t ino64_t;




typedef __dev_t dev_t;




typedef __gid_t gid_t;




typedef __mode_t mode_t;




typedef __nlink_t nlink_t;




typedef __uid_t uid_t;





typedef __off_t off_t;






typedef __off64_t off64_t;




typedef __pid_t pid_t;





typedef __id_t id_t;




typedef __ssize_t ssize_t;





typedef __daddr_t daddr_t;
typedef __caddr_t caddr_t;





typedef __key_t key_t;




# 1 "/usr/include/x86_64-linux-gnu/bits/types/clock_t.h" 1 3 4






typedef __clock_t clock_t;
# 127 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/clockid_t.h" 1 3 4






typedef __clockid_t clockid_t;
# 129 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/time_t.h" 1 3 4






typedef __time_t time_t;
# 130 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/timer_t.h" 1 3 4






typedef __timer_t timer_t;
# 131 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef __useconds_t useconds_t;



typedef __suseconds_t suseconds_t;





# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 145 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4



typedef unsigned long int ulong;
typedef unsigned short int ushort;
typedef unsigned int uint;




# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-intn.h" 3 4
typedef __int8_t int8_t;
typedef __int16_t int16_t;
typedef __int32_t int32_t;
typedef __int64_t int64_t;
# 156 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


typedef __uint8_t u_int8_t;
typedef __uint16_t u_int16_t;
typedef __uint32_t u_int32_t;
typedef __uint64_t u_int64_t;


typedef int register_t __attribute__ ((__mode__ (__word__)));
# 176 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
# 1 "/usr/include/endian.h" 1 3 4
# 35 "/usr/include/endian.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 1 3 4
# 33 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
static __inline __uint16_t
__bswap_16 (__uint16_t __bsx)
{

  return __builtin_bswap16 (__bsx);



}






static __inline __uint32_t
__bswap_32 (__uint32_t __bsx)
{

  return __builtin_bswap32 (__bsx);



}
# 69 "/usr/include/x86_64-linux-gnu/bits/byteswap.h" 3 4
__extension__ static __inline __uint64_t
__bswap_64 (__uint64_t __bsx)
{

  return __builtin_bswap64 (__bsx);



}
# 36 "/usr/include/endian.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 1 3 4
# 32 "/usr/include/x86_64-linux-gnu/bits/uintn-identity.h" 3 4
static __inline __uint16_t
__uint16_identity (__uint16_t __x)
{
  return __x;
}

static __inline __uint32_t
__uint32_identity (__uint32_t __x)
{
  return __x;
}

static __inline __uint64_t
__uint64_identity (__uint64_t __x)
{
  return __x;
}
# 37 "/usr/include/endian.h" 2 3 4
# 177 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/sys/select.h" 1 3 4
# 30 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/select.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/select.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/select.h" 2 3 4
# 31 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 1 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/__sigset_t.h" 1 3 4




typedef struct
{
  unsigned long int __val[(1024 / (8 * sizeof (unsigned long int)))];
} __sigset_t;
# 5 "/usr/include/x86_64-linux-gnu/bits/types/sigset_t.h" 2 3 4


typedef __sigset_t sigset_t;
# 34 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4



# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timeval.h" 1 3 4







struct timeval
{
  __time_t tv_sec;
  __suseconds_t tv_usec;
};
# 38 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
struct timespec
{
  __time_t tv_sec;



  __syscall_slong_t tv_nsec;
# 26 "/usr/include/x86_64-linux-gnu/bits/types/struct_timespec.h" 3 4
};
# 40 "/usr/include/x86_64-linux-gnu/sys/select.h" 2 3 4
# 49 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef long int __fd_mask;
# 59 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
typedef struct
  {



    __fd_mask fds_bits[1024 / (8 * (int) sizeof (__fd_mask))];





  } fd_set;






typedef __fd_mask fd_mask;
# 91 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern "C" {
# 101 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int select (int __nfds, fd_set *__restrict __readfds,
     fd_set *__restrict __writefds,
     fd_set *__restrict __exceptfds,
     struct timeval *__restrict __timeout);
# 113 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
extern int pselect (int __nfds, fd_set *__restrict __readfds,
      fd_set *__restrict __writefds,
      fd_set *__restrict __exceptfds,
      const struct timespec *__restrict __timeout,
      const __sigset_t *__restrict __sigmask);
# 126 "/usr/include/x86_64-linux-gnu/sys/select.h" 3 4
}
# 180 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4





typedef __blksize_t blksize_t;






typedef __blkcnt_t blkcnt_t;



typedef __fsblkcnt_t fsblkcnt_t;



typedef __fsfilcnt_t fsfilcnt_t;
# 219 "/usr/include/x86_64-linux-gnu/sys/types.h" 3 4
typedef __blkcnt64_t blkcnt64_t;
typedef __fsblkcnt64_t fsblkcnt64_t;
typedef __fsfilcnt64_t fsfilcnt64_t;





# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 1 3 4
# 44 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 1 3 4
# 21 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes-arch.h" 2 3 4
# 45 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




typedef struct __pthread_internal_list
{
  struct __pthread_internal_list *__prev;
  struct __pthread_internal_list *__next;
} __pthread_list_t;

typedef struct __pthread_internal_slist
{
  struct __pthread_internal_slist *__next;
} __pthread_slist_t;
# 74 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 1 3 4
# 22 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
struct __pthread_mutex_s
{
  int __lock;
  unsigned int __count;
  int __owner;

  unsigned int __nusers;



  int __kind;

  short __spins;
  short __elision;
  __pthread_list_t __list;
# 53 "/usr/include/x86_64-linux-gnu/bits/struct_mutex.h" 3 4
};
# 75 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4
# 87 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 1 3 4
# 23 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
struct __pthread_rwlock_arch_t
{
  unsigned int __readers;
  unsigned int __writers;
  unsigned int __wrphase_futex;
  unsigned int __writers_futex;
  unsigned int __pad3;
  unsigned int __pad4;

  int __cur_writer;
  int __shared;
  signed char __rwelision;




  unsigned char __pad1[7];


  unsigned long int __pad2;


  unsigned int __flags;
# 55 "/usr/include/x86_64-linux-gnu/bits/struct_rwlock.h" 3 4
};
# 88 "/usr/include/x86_64-linux-gnu/bits/thread-shared-types.h" 2 3 4




struct __pthread_cond_s
{
  __extension__ union
  {
    __extension__ unsigned long long int __wseq;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __wseq32;
  };
  __extension__ union
  {
    __extension__ unsigned long long int __g1_start;
    struct
    {
      unsigned int __low;
      unsigned int __high;
    } __g1_start32;
  };
  unsigned int __g_refs[2] ;
  unsigned int __g_size[2];
  unsigned int __g1_orig_size;
  unsigned int __wrefs;
  unsigned int __g_signals[2];
};
# 24 "/usr/include/x86_64-linux-gnu/bits/pthreadtypes.h" 2 3 4



typedef unsigned long int pthread_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_mutexattr_t;




typedef union
{
  char __size[4];
  int __align;
} pthread_condattr_t;



typedef unsigned int pthread_key_t;



typedef int pthread_once_t;


union pthread_attr_t
{
  char __size[56];
  long int __align;
};

typedef union pthread_attr_t pthread_attr_t;




typedef union
{
  struct __pthread_mutex_s __data;
  char __size[40];
  long int __align;
} pthread_mutex_t;


typedef union
{
  struct __pthread_cond_s __data;
  char __size[48];
  __extension__ long long int __align;
} pthread_cond_t;





typedef union
{
  struct __pthread_rwlock_arch_t __data;
  char __size[56];
  long int __align;
} pthread_rwlock_t;

typedef union
{
  char __size[8];
  long int __align;
} pthread_rwlockattr_t;





typedef volatile int pthread_spinlock_t;




typedef union
{
  char __size[32];
  long int __align;
} pthread_barrier_t;

typedef union
{
  char __size[4];
  int __align;
} pthread_barrierattr_t;
# 228 "/usr/include/x86_64-linux-gnu/sys/types.h" 2 3 4


}
# 395 "/usr/include/stdlib.h" 2 3 4






extern long int random (void) throw ();


extern void srandom (unsigned int __seed) throw ();





extern char *initstate (unsigned int __seed, char *__statebuf,
   size_t __statelen) throw () __attribute__ ((__nonnull__ (2)));



extern char *setstate (char *__statebuf) throw () __attribute__ ((__nonnull__ (1)));







struct random_data
  {
    int32_t *fptr;
    int32_t *rptr;
    int32_t *state;
    int rand_type;
    int rand_deg;
    int rand_sep;
    int32_t *end_ptr;
  };

extern int random_r (struct random_data *__restrict __buf,
       int32_t *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int srandom_r (unsigned int __seed, struct random_data *__buf)
     throw () __attribute__ ((__nonnull__ (2)));

extern int initstate_r (unsigned int __seed, char *__restrict __statebuf,
   size_t __statelen,
   struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (2, 4)));

extern int setstate_r (char *__restrict __statebuf,
         struct random_data *__restrict __buf)
     throw () __attribute__ ((__nonnull__ (1, 2)));





extern int rand (void) throw ();

extern void srand (unsigned int __seed) throw ();



extern int rand_r (unsigned int *__seed) throw ();







extern double drand48 (void) throw ();
extern double erand48 (unsigned short int __xsubi[3]) throw () __attribute__ ((__nonnull__ (1)));


extern long int lrand48 (void) throw ();
extern long int nrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern long int mrand48 (void) throw ();
extern long int jrand48 (unsigned short int __xsubi[3])
     throw () __attribute__ ((__nonnull__ (1)));


extern void srand48 (long int __seedval) throw ();
extern unsigned short int *seed48 (unsigned short int __seed16v[3])
     throw () __attribute__ ((__nonnull__ (1)));
extern void lcong48 (unsigned short int __param[7]) throw () __attribute__ ((__nonnull__ (1)));





struct drand48_data
  {
    unsigned short int __x[3];
    unsigned short int __old_x[3];
    unsigned short int __c;
    unsigned short int __init;
    __extension__ unsigned long long int __a;

  };


extern int drand48_r (struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));
extern int erand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        double *__restrict __result) throw () __attribute__ ((__nonnull__ (1, 2)));


extern int lrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int nrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int mrand48_r (struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));
extern int jrand48_r (unsigned short int __xsubi[3],
        struct drand48_data *__restrict __buffer,
        long int *__restrict __result)
     throw () __attribute__ ((__nonnull__ (1, 2)));


extern int srand48_r (long int __seedval, struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (2)));

extern int seed48_r (unsigned short int __seed16v[3],
       struct drand48_data *__buffer) throw () __attribute__ ((__nonnull__ (1, 2)));

extern int lcong48_r (unsigned short int __param[7],
        struct drand48_data *__buffer)
     throw () __attribute__ ((__nonnull__ (1, 2)));




extern void *malloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;

extern void *calloc (size_t __nmemb, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (1, 2))) ;






extern void *realloc (void *__ptr, size_t __size)
     throw () __attribute__ ((__warn_unused_result__)) __attribute__ ((__alloc_size__ (2)));







extern void *reallocarray (void *__ptr, size_t __nmemb, size_t __size)
     throw () __attribute__ ((__warn_unused_result__))
     __attribute__ ((__alloc_size__ (2, 3)));



extern void free (void *__ptr) throw ();


# 1 "/usr/include/alloca.h" 1 3 4
# 24 "/usr/include/alloca.h" 3 4
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 25 "/usr/include/alloca.h" 2 3 4

extern "C" {





extern void *alloca (size_t __size) throw ();





}
# 569 "/usr/include/stdlib.h" 2 3 4





extern void *valloc (size_t __size) throw () __attribute__ ((__malloc__))
     __attribute__ ((__alloc_size__ (1))) ;




extern int posix_memalign (void **__memptr, size_t __alignment, size_t __size)
     throw () __attribute__ ((__nonnull__ (1))) ;




extern void *aligned_alloc (size_t __alignment, size_t __size)
     throw () __attribute__ ((__malloc__)) __attribute__ ((__alloc_size__ (2))) ;



extern void abort (void) throw () __attribute__ ((__noreturn__));



extern int atexit (void (*__func) (void)) throw () __attribute__ ((__nonnull__ (1)));




extern "C++" int at_quick_exit (void (*__func) (void))
     throw () __asm ("at_quick_exit") __attribute__ ((__nonnull__ (1)));
# 610 "/usr/include/stdlib.h" 3 4
extern int on_exit (void (*__func) (int __status, void *__arg), void *__arg)
     throw () __attribute__ ((__nonnull__ (1)));





extern void exit (int __status) throw () __attribute__ ((__noreturn__));





extern void quick_exit (int __status) throw () __attribute__ ((__noreturn__));





extern void _Exit (int __status) throw () __attribute__ ((__noreturn__));




extern char *getenv (const char *__name) throw () __attribute__ ((__nonnull__ (1))) ;




extern char *secure_getenv (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;






extern int putenv (char *__string) throw () __attribute__ ((__nonnull__ (1)));





extern int setenv (const char *__name, const char *__value, int __replace)
     throw () __attribute__ ((__nonnull__ (2)));


extern int unsetenv (const char *__name) throw () __attribute__ ((__nonnull__ (1)));






extern int clearenv (void) throw ();
# 675 "/usr/include/stdlib.h" 3 4
extern char *mktemp (char *__template) throw () __attribute__ ((__nonnull__ (1)));
# 688 "/usr/include/stdlib.h" 3 4
extern int mkstemp (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 698 "/usr/include/stdlib.h" 3 4
extern int mkstemp64 (char *__template) __attribute__ ((__nonnull__ (1))) ;
# 710 "/usr/include/stdlib.h" 3 4
extern int mkstemps (char *__template, int __suffixlen) __attribute__ ((__nonnull__ (1))) ;
# 720 "/usr/include/stdlib.h" 3 4
extern int mkstemps64 (char *__template, int __suffixlen)
     __attribute__ ((__nonnull__ (1))) ;
# 731 "/usr/include/stdlib.h" 3 4
extern char *mkdtemp (char *__template) throw () __attribute__ ((__nonnull__ (1))) ;
# 742 "/usr/include/stdlib.h" 3 4
extern int mkostemp (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 752 "/usr/include/stdlib.h" 3 4
extern int mkostemp64 (char *__template, int __flags) __attribute__ ((__nonnull__ (1))) ;
# 762 "/usr/include/stdlib.h" 3 4
extern int mkostemps (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 774 "/usr/include/stdlib.h" 3 4
extern int mkostemps64 (char *__template, int __suffixlen, int __flags)
     __attribute__ ((__nonnull__ (1))) ;
# 784 "/usr/include/stdlib.h" 3 4
extern int system (const char *__command) ;





extern char *canonicalize_file_name (const char *__name)
     throw () __attribute__ ((__nonnull__ (1))) ;
# 800 "/usr/include/stdlib.h" 3 4
extern char *realpath (const char *__restrict __name,
         char *__restrict __resolved) throw () ;






typedef int (*__compar_fn_t) (const void *, const void *);


typedef __compar_fn_t comparison_fn_t;



typedef int (*__compar_d_fn_t) (const void *, const void *, void *);




extern void *bsearch (const void *__key, const void *__base,
        size_t __nmemb, size_t __size, __compar_fn_t __compar)
     __attribute__ ((__nonnull__ (1, 2, 5))) ;







extern void qsort (void *__base, size_t __nmemb, size_t __size,
     __compar_fn_t __compar) __attribute__ ((__nonnull__ (1, 4)));

extern void qsort_r (void *__base, size_t __nmemb, size_t __size,
       __compar_d_fn_t __compar, void *__arg)
  __attribute__ ((__nonnull__ (1, 4)));




extern int abs (int __x) throw () __attribute__ ((__const__)) ;
extern long int labs (long int __x) throw () __attribute__ ((__const__)) ;


__extension__ extern long long int llabs (long long int __x)
     throw () __attribute__ ((__const__)) ;






extern div_t div (int __numer, int __denom)
     throw () __attribute__ ((__const__)) ;
extern ldiv_t ldiv (long int __numer, long int __denom)
     throw () __attribute__ ((__const__)) ;


__extension__ extern lldiv_t lldiv (long long int __numer,
        long long int __denom)
     throw () __attribute__ ((__const__)) ;
# 872 "/usr/include/stdlib.h" 3 4
extern char *ecvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *fcvt (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign) throw () __attribute__ ((__nonnull__ (3, 4))) ;




extern char *gcvt (double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern char *qecvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qfcvt (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign)
     throw () __attribute__ ((__nonnull__ (3, 4))) ;
extern char *qgcvt (long double __value, int __ndigit, char *__buf)
     throw () __attribute__ ((__nonnull__ (3))) ;




extern int ecvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int fcvt_r (double __value, int __ndigit, int *__restrict __decpt,
     int *__restrict __sign, char *__restrict __buf,
     size_t __len) throw () __attribute__ ((__nonnull__ (3, 4, 5)));

extern int qecvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));
extern int qfcvt_r (long double __value, int __ndigit,
      int *__restrict __decpt, int *__restrict __sign,
      char *__restrict __buf, size_t __len)
     throw () __attribute__ ((__nonnull__ (3, 4, 5)));





extern int mblen (const char *__s, size_t __n) throw ();


extern int mbtowc (wchar_t *__restrict __pwc,
     const char *__restrict __s, size_t __n) throw ();


extern int wctomb (char *__s, wchar_t __wchar) throw ();



extern size_t mbstowcs (wchar_t *__restrict __pwcs,
   const char *__restrict __s, size_t __n) throw ();

extern size_t wcstombs (char *__restrict __s,
   const wchar_t *__restrict __pwcs, size_t __n)
     throw ();







extern int rpmatch (const char *__response) throw () __attribute__ ((__nonnull__ (1))) ;
# 957 "/usr/include/stdlib.h" 3 4
extern int getsubopt (char **__restrict __optionp,
        char *const *__restrict __tokens,
        char **__restrict __valuep)
     throw () __attribute__ ((__nonnull__ (1, 2, 3))) ;







extern int posix_openpt (int __oflag) ;







extern int grantpt (int __fd) throw ();



extern int unlockpt (int __fd) throw ();




extern char *ptsname (int __fd) throw () ;






extern int ptsname_r (int __fd, char *__buf, size_t __buflen)
     throw () __attribute__ ((__nonnull__ (2)));


extern int getpt (void);






extern int getloadavg (double __loadavg[], int __nelem)
     throw () __attribute__ ((__nonnull__ (1)));
# 1013 "/usr/include/stdlib.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdlib-float.h" 1 3 4
# 1014 "/usr/include/stdlib.h" 2 3 4
# 1023 "/usr/include/stdlib.h" 3 4
}
# 76 "/usr/include/c++/9/cstdlib" 2 3

# 1 "/usr/include/c++/9/bits/std_abs.h" 1 3
# 33 "/usr/include/c++/9/bits/std_abs.h" 3
       
# 34 "/usr/include/c++/9/bits/std_abs.h" 3
# 46 "/usr/include/c++/9/bits/std_abs.h" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::abs;


  inline long
  abs(long __i) { return __builtin_labs(__i); }



  inline long long
  abs(long long __x) { return __builtin_llabs (__x); }
# 70 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr double
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline constexpr float
  abs(float __x)
  { return __builtin_fabsf(__x); }

  inline constexpr long double
  abs(long double __x)
  { return __builtin_fabsl(__x); }



  inline constexpr __int128
  abs(__int128 __x) { return __x >= 0 ? __x : -__x; }
# 101 "/usr/include/c++/9/bits/std_abs.h" 3
  inline constexpr
  __float128
  abs(__float128 __x)
  { return __x < 0 ? -__x : __x; }



}
}
# 78 "/usr/include/c++/9/cstdlib" 2 3
# 121 "/usr/include/c++/9/cstdlib" 3
extern "C++"
{
namespace std __attribute__ ((__visibility__ ("default")))
{


  using ::div_t;
  using ::ldiv_t;

  using ::abort;



  using ::atexit;


  using ::at_quick_exit;


  using ::atof;
  using ::atoi;
  using ::atol;
  using ::bsearch;
  using ::calloc;
  using ::div;
  using ::exit;
  using ::free;
  using ::getenv;
  using ::labs;
  using ::ldiv;
  using ::malloc;

  using ::mblen;
  using ::mbstowcs;
  using ::mbtowc;

  using ::qsort;


  using ::quick_exit;


  using ::rand;
  using ::realloc;
  using ::srand;
  using ::strtod;
  using ::strtol;
  using ::strtoul;
  using ::system;

  using ::wcstombs;
  using ::wctomb;



  inline ldiv_t
  div(long __i, long __j) { return ldiv(__i, __j); }




}
# 195 "/usr/include/c++/9/cstdlib" 3
namespace __gnu_cxx __attribute__ ((__visibility__ ("default")))
{



  using ::lldiv_t;





  using ::_Exit;



  using ::llabs;

  inline lldiv_t
  div(long long __n, long long __d)
  { lldiv_t __q; __q.quot = __n / __d; __q.rem = __n % __d; return __q; }

  using ::lldiv;
# 227 "/usr/include/c++/9/cstdlib" 3
  using ::atoll;
  using ::strtoll;
  using ::strtoull;

  using ::strtof;
  using ::strtold;


}

namespace std
{

  using ::__gnu_cxx::lldiv_t;

  using ::__gnu_cxx::_Exit;

  using ::__gnu_cxx::llabs;
  using ::__gnu_cxx::div;
  using ::__gnu_cxx::lldiv;

  using ::__gnu_cxx::atoll;
  using ::__gnu_cxx::strtof;
  using ::__gnu_cxx::strtoll;
  using ::__gnu_cxx::strtoull;
  using ::__gnu_cxx::strtold;
}



}
# 37 "/usr/include/c++/9/stdlib.h" 2 3

using std::abort;
using std::atexit;
using std::exit;


  using std::at_quick_exit;


  using std::quick_exit;




using std::div_t;
using std::ldiv_t;

using std::abs;
using std::atof;
using std::atoi;
using std::atol;
using std::bsearch;
using std::calloc;
using std::div;
using std::free;
using std::getenv;
using std::labs;
using std::ldiv;
using std::malloc;

using std::mblen;
using std::mbstowcs;
using std::mbtowc;

using std::qsort;
using std::rand;
using std::realloc;
using std::srand;
using std::strtod;
using std::strtol;
using std::strtoul;
using std::system;

using std::wcstombs;
using std::wctomb;
# 4 "akinator/akinator.cpp" 2

# 1 "akinator/../general/general.h" 1
       

# 1 "akinator/../general/../logs/errors_and_logs.h" 1
       

# 1 "/usr/include/assert.h" 1 3 4
# 66 "/usr/include/assert.h" 3 4
extern "C" {


extern void __assert_fail (const char *__assertion, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));


extern void __assert_perror_fail (int __errnum, const char *__file,
      unsigned int __line, const char *__function)
     throw () __attribute__ ((__noreturn__));




extern void __assert (const char *__assertion, const char *__file, int __line)
     throw () __attribute__ ((__noreturn__));


}
# 4 "akinator/../general/../logs/errors_and_logs.h" 2
# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 1 3 4
# 9 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 3 4
# 1 "/usr/include/stdint.h" 1 3 4
# 26 "/usr/include/stdint.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 27 "/usr/include/stdint.h" 2 3 4

# 1 "/usr/include/x86_64-linux-gnu/bits/wchar.h" 1 3 4
# 29 "/usr/include/stdint.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/wordsize.h" 1 3 4
# 30 "/usr/include/stdint.h" 2 3 4







# 1 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 1 3 4
# 24 "/usr/include/x86_64-linux-gnu/bits/stdint-uintn.h" 3 4
typedef __uint8_t uint8_t;
typedef __uint16_t uint16_t;
typedef __uint32_t uint32_t;
typedef __uint64_t uint64_t;
# 38 "/usr/include/stdint.h" 2 3 4





typedef __int_least8_t int_least8_t;
typedef __int_least16_t int_least16_t;
typedef __int_least32_t int_least32_t;
typedef __int_least64_t int_least64_t;


typedef __uint_least8_t uint_least8_t;
typedef __uint_least16_t uint_least16_t;
typedef __uint_least32_t uint_least32_t;
typedef __uint_least64_t uint_least64_t;





typedef signed char int_fast8_t;

typedef long int int_fast16_t;
typedef long int int_fast32_t;
typedef long int int_fast64_t;
# 71 "/usr/include/stdint.h" 3 4
typedef unsigned char uint_fast8_t;

typedef unsigned long int uint_fast16_t;
typedef unsigned long int uint_fast32_t;
typedef unsigned long int uint_fast64_t;
# 87 "/usr/include/stdint.h" 3 4
typedef long int intptr_t;


typedef unsigned long int uintptr_t;
# 101 "/usr/include/stdint.h" 3 4
typedef __intmax_t intmax_t;
typedef __uintmax_t uintmax_t;
# 10 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdint.h" 2 3 4
# 5 "akinator/../general/../logs/errors_and_logs.h" 2
# 1 "/usr/include/stdio.h" 1 3 4
# 27 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/libc-header-start.h" 1 3 4
# 28 "/usr/include/stdio.h" 2 3 4

extern "C" {



# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 34 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 1 3 4
# 40 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stdarg.h" 3 4
typedef __builtin_va_list __gnuc_va_list;
# 37 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 1 3 4




# 1 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 1 3 4
# 13 "/usr/include/x86_64-linux-gnu/bits/types/__mbstate_t.h" 3 4
typedef struct
{
  int __count;
  union
  {
    unsigned int __wch;
    char __wchb[4];
  } __value;
} __mbstate_t;
# 6 "/usr/include/x86_64-linux-gnu/bits/types/__fpos_t.h" 2 3 4




typedef struct _G_fpos_t
{
  __off_t __pos;
  __mbstate_t __state;
} __fpos_t;
# 40 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 1 3 4
# 10 "/usr/include/x86_64-linux-gnu/bits/types/__fpos64_t.h" 3 4
typedef struct _G_fpos64_t
{
  __off64_t __pos;
  __mbstate_t __state;
} __fpos64_t;
# 41 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/__FILE.h" 1 3 4



struct _IO_FILE;
typedef struct _IO_FILE __FILE;
# 42 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/FILE.h" 1 3 4



struct _IO_FILE;


typedef struct _IO_FILE FILE;
# 43 "/usr/include/stdio.h" 2 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 1 3 4
# 35 "/usr/include/x86_64-linux-gnu/bits/types/struct_FILE.h" 3 4
struct _IO_FILE;
struct _IO_marker;
struct _IO_codecvt;
struct _IO_wide_data;




typedef void _IO_lock_t;





struct _IO_FILE
{
  int _flags;


  char *_IO_read_ptr;
  char *_IO_read_end;
  char *_IO_read_base;
  char *_IO_write_base;
  char *_IO_write_ptr;
  char *_IO_write_end;
  char *_IO_buf_base;
  char *_IO_buf_end;


  char *_IO_save_base;
  char *_IO_backup_base;
  char *_IO_save_end;

  struct _IO_marker *_markers;

  struct _IO_FILE *_chain;

  int _fileno;
  int _flags2;
  __off_t _old_offset;


  unsigned short _cur_column;
  signed char _vtable_offset;
  char _shortbuf[1];

  _IO_lock_t *_lock;







  __off64_t _offset;

  struct _IO_codecvt *_codecvt;
  struct _IO_wide_data *_wide_data;
  struct _IO_FILE *_freeres_list;
  void *_freeres_buf;
  size_t __pad5;
  int _mode;

  char _unused2[15 * sizeof (int) - 4 * sizeof (void *) - sizeof (size_t)];
};
# 44 "/usr/include/stdio.h" 2 3 4


# 1 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 1 3 4
# 27 "/usr/include/x86_64-linux-gnu/bits/types/cookie_io_functions_t.h" 3 4
typedef __ssize_t cookie_read_function_t (void *__cookie, char *__buf,
                                          size_t __nbytes);







typedef __ssize_t cookie_write_function_t (void *__cookie, const char *__buf,
                                           size_t __nbytes);







typedef int cookie_seek_function_t (void *__cookie, __off64_t *__pos, int __w);


typedef int cookie_close_function_t (void *__cookie);






typedef struct _IO_cookie_io_functions_t
{
  cookie_read_function_t *read;
  cookie_write_function_t *write;
  cookie_seek_function_t *seek;
  cookie_close_function_t *close;
} cookie_io_functions_t;
# 47 "/usr/include/stdio.h" 2 3 4





typedef __gnuc_va_list va_list;
# 84 "/usr/include/stdio.h" 3 4
typedef __fpos_t fpos_t;




typedef __fpos64_t fpos64_t;
# 133 "/usr/include/stdio.h" 3 4
# 1 "/usr/include/x86_64-linux-gnu/bits/stdio_lim.h" 1 3 4
# 134 "/usr/include/stdio.h" 2 3 4



extern FILE *stdin;
extern FILE *stdout;
extern FILE *stderr;






extern int remove (const char *__filename) throw ();

extern int rename (const char *__old, const char *__new) throw ();



extern int renameat (int __oldfd, const char *__old, int __newfd,
       const char *__new) throw ();
# 164 "/usr/include/stdio.h" 3 4
extern int renameat2 (int __oldfd, const char *__old, int __newfd,
        const char *__new, unsigned int __flags) throw ();







extern FILE *tmpfile (void) ;
# 183 "/usr/include/stdio.h" 3 4
extern FILE *tmpfile64 (void) ;



extern char *tmpnam (char *__s) throw () ;




extern char *tmpnam_r (char *__s) throw () ;
# 204 "/usr/include/stdio.h" 3 4
extern char *tempnam (const char *__dir, const char *__pfx)
     throw () __attribute__ ((__malloc__)) ;







extern int fclose (FILE *__stream);




extern int fflush (FILE *__stream);
# 227 "/usr/include/stdio.h" 3 4
extern int fflush_unlocked (FILE *__stream);
# 237 "/usr/include/stdio.h" 3 4
extern int fcloseall (void);
# 246 "/usr/include/stdio.h" 3 4
extern FILE *fopen (const char *__restrict __filename,
      const char *__restrict __modes) ;




extern FILE *freopen (const char *__restrict __filename,
        const char *__restrict __modes,
        FILE *__restrict __stream) ;
# 270 "/usr/include/stdio.h" 3 4
extern FILE *fopen64 (const char *__restrict __filename,
        const char *__restrict __modes) ;
extern FILE *freopen64 (const char *__restrict __filename,
   const char *__restrict __modes,
   FILE *__restrict __stream) ;




extern FILE *fdopen (int __fd, const char *__modes) throw () ;





extern FILE *fopencookie (void *__restrict __magic_cookie,
     const char *__restrict __modes,
     cookie_io_functions_t __io_funcs) throw () ;




extern FILE *fmemopen (void *__s, size_t __len, const char *__modes)
  throw () ;




extern FILE *open_memstream (char **__bufloc, size_t *__sizeloc) throw () ;





extern void setbuf (FILE *__restrict __stream, char *__restrict __buf) throw ();



extern int setvbuf (FILE *__restrict __stream, char *__restrict __buf,
      int __modes, size_t __n) throw ();




extern void setbuffer (FILE *__restrict __stream, char *__restrict __buf,
         size_t __size) throw ();


extern void setlinebuf (FILE *__stream) throw ();







extern int fprintf (FILE *__restrict __stream,
      const char *__restrict __format, ...);




extern int printf (const char *__restrict __format, ...);

extern int sprintf (char *__restrict __s,
      const char *__restrict __format, ...) throw ();





extern int vfprintf (FILE *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg);




extern int vprintf (const char *__restrict __format, __gnuc_va_list __arg);

extern int vsprintf (char *__restrict __s, const char *__restrict __format,
       __gnuc_va_list __arg) throw ();



extern int snprintf (char *__restrict __s, size_t __maxlen,
       const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 3, 4)));

extern int vsnprintf (char *__restrict __s, size_t __maxlen,
        const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 3, 0)));





extern int vasprintf (char **__restrict __ptr, const char *__restrict __f,
        __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__printf__, 2, 0))) ;
extern int __asprintf (char **__restrict __ptr,
         const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;
extern int asprintf (char **__restrict __ptr,
       const char *__restrict __fmt, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3))) ;




extern int vdprintf (int __fd, const char *__restrict __fmt,
       __gnuc_va_list __arg)
     __attribute__ ((__format__ (__printf__, 2, 0)));
extern int dprintf (int __fd, const char *__restrict __fmt, ...)
     __attribute__ ((__format__ (__printf__, 2, 3)));







extern int fscanf (FILE *__restrict __stream,
     const char *__restrict __format, ...) ;




extern int scanf (const char *__restrict __format, ...) ;

extern int sscanf (const char *__restrict __s,
     const char *__restrict __format, ...) throw ();






extern int fscanf (FILE *__restrict __stream, const char *__restrict __format, ...) __asm__ ("" "__isoc99_fscanf")

                               ;
extern int scanf (const char *__restrict __format, ...) __asm__ ("" "__isoc99_scanf")
                              ;
extern int sscanf (const char *__restrict __s, const char *__restrict __format, ...) throw () __asm__ ("" "__isoc99_sscanf")

                      ;
# 432 "/usr/include/stdio.h" 3 4
extern int vfscanf (FILE *__restrict __s, const char *__restrict __format,
      __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 2, 0))) ;





extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg)
     __attribute__ ((__format__ (__scanf__, 1, 0))) ;


extern int vsscanf (const char *__restrict __s,
      const char *__restrict __format, __gnuc_va_list __arg)
     throw () __attribute__ ((__format__ (__scanf__, 2, 0)));




extern int vfscanf (FILE *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vfscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0))) ;
extern int vscanf (const char *__restrict __format, __gnuc_va_list __arg) __asm__ ("" "__isoc99_vscanf")

     __attribute__ ((__format__ (__scanf__, 1, 0))) ;
extern int vsscanf (const char *__restrict __s, const char *__restrict __format, __gnuc_va_list __arg) throw () __asm__ ("" "__isoc99_vsscanf")



     __attribute__ ((__format__ (__scanf__, 2, 0)));
# 485 "/usr/include/stdio.h" 3 4
extern int fgetc (FILE *__stream);
extern int getc (FILE *__stream);





extern int getchar (void);






extern int getc_unlocked (FILE *__stream);
extern int getchar_unlocked (void);
# 510 "/usr/include/stdio.h" 3 4
extern int fgetc_unlocked (FILE *__stream);
# 521 "/usr/include/stdio.h" 3 4
extern int fputc (int __c, FILE *__stream);
extern int putc (int __c, FILE *__stream);





extern int putchar (int __c);
# 537 "/usr/include/stdio.h" 3 4
extern int fputc_unlocked (int __c, FILE *__stream);







extern int putc_unlocked (int __c, FILE *__stream);
extern int putchar_unlocked (int __c);






extern int getw (FILE *__stream);


extern int putw (int __w, FILE *__stream);







extern char *fgets (char *__restrict __s, int __n, FILE *__restrict __stream)
     ;
# 587 "/usr/include/stdio.h" 3 4
extern char *fgets_unlocked (char *__restrict __s, int __n,
        FILE *__restrict __stream) ;
# 603 "/usr/include/stdio.h" 3 4
extern __ssize_t __getdelim (char **__restrict __lineptr,
                             size_t *__restrict __n, int __delimiter,
                             FILE *__restrict __stream) ;
extern __ssize_t getdelim (char **__restrict __lineptr,
                           size_t *__restrict __n, int __delimiter,
                           FILE *__restrict __stream) ;







extern __ssize_t getline (char **__restrict __lineptr,
                          size_t *__restrict __n,
                          FILE *__restrict __stream) ;







extern int fputs (const char *__restrict __s, FILE *__restrict __stream);





extern int puts (const char *__s);






extern int ungetc (int __c, FILE *__stream);






extern size_t fread (void *__restrict __ptr, size_t __size,
       size_t __n, FILE *__restrict __stream) ;




extern size_t fwrite (const void *__restrict __ptr, size_t __size,
        size_t __n, FILE *__restrict __s);
# 662 "/usr/include/stdio.h" 3 4
extern int fputs_unlocked (const char *__restrict __s,
      FILE *__restrict __stream);
# 673 "/usr/include/stdio.h" 3 4
extern size_t fread_unlocked (void *__restrict __ptr, size_t __size,
         size_t __n, FILE *__restrict __stream) ;
extern size_t fwrite_unlocked (const void *__restrict __ptr, size_t __size,
          size_t __n, FILE *__restrict __stream);







extern int fseek (FILE *__stream, long int __off, int __whence);




extern long int ftell (FILE *__stream) ;




extern void rewind (FILE *__stream);
# 707 "/usr/include/stdio.h" 3 4
extern int fseeko (FILE *__stream, __off_t __off, int __whence);




extern __off_t ftello (FILE *__stream) ;
# 731 "/usr/include/stdio.h" 3 4
extern int fgetpos (FILE *__restrict __stream, fpos_t *__restrict __pos);




extern int fsetpos (FILE *__stream, const fpos_t *__pos);
# 750 "/usr/include/stdio.h" 3 4
extern int fseeko64 (FILE *__stream, __off64_t __off, int __whence);
extern __off64_t ftello64 (FILE *__stream) ;
extern int fgetpos64 (FILE *__restrict __stream, fpos64_t *__restrict __pos);
extern int fsetpos64 (FILE *__stream, const fpos64_t *__pos);



extern void clearerr (FILE *__stream) throw ();

extern int feof (FILE *__stream) throw () ;

extern int ferror (FILE *__stream) throw () ;



extern void clearerr_unlocked (FILE *__stream) throw ();
extern int feof_unlocked (FILE *__stream) throw () ;
extern int ferror_unlocked (FILE *__stream) throw () ;







extern void perror (const char *__s);





# 1 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 1 3 4
# 26 "/usr/include/x86_64-linux-gnu/bits/sys_errlist.h" 3 4
extern int sys_nerr;
extern const char *const sys_errlist[];


extern int _sys_nerr;
extern const char *const _sys_errlist[];
# 782 "/usr/include/stdio.h" 2 3 4




extern int fileno (FILE *__stream) throw () ;




extern int fileno_unlocked (FILE *__stream) throw () ;
# 800 "/usr/include/stdio.h" 3 4
extern FILE *popen (const char *__command, const char *__modes) ;





extern int pclose (FILE *__stream);





extern char *ctermid (char *__s) throw ();





extern char *cuserid (char *__s);




struct obstack;


extern int obstack_printf (struct obstack *__restrict __obstack,
      const char *__restrict __format, ...)
     throw () __attribute__ ((__format__ (__printf__, 2, 3)));
extern int obstack_vprintf (struct obstack *__restrict __obstack,
       const char *__restrict __format,
       __gnuc_va_list __args)
     throw () __attribute__ ((__format__ (__printf__, 2, 0)));







extern void flockfile (FILE *__stream) throw ();



extern int ftrylockfile (FILE *__stream) throw () ;


extern void funlockfile (FILE *__stream) throw ();
# 858 "/usr/include/stdio.h" 3 4
extern int __uflow (FILE *);
extern int __overflow (FILE *, int);
# 873 "/usr/include/stdio.h" 3 4
}
# 6 "akinator/../general/../logs/errors_and_logs.h" 2

# 1 "akinator/../general/../logs/errors.h" 1
       
# 11 "akinator/../general/../logs/errors.h"

# 11 "akinator/../general/../logs/errors.h"
enum errors {

# 1 "akinator/../general/../logs/../include/errors.txt" 1
STK_INVALSIZE = 100,


STK_NO_MEM = 101,


STK_OVRFLW = 102,


STK_UNDFLW = 103,


STK_NO_ELEMS_PUSHED = 104,


STK_INV_NEW_SIZE = 105,


STK_CTOR_UNPREPARED = 106,


STK_SZ_LESS_CT = 107,


STK_UNKNOWN_RESZ_PARAM = 108,


STK_INV_SZ_ELEM = 109,


STK_INV_CAPACITY = 110,


STK_INV_ELEM_CT = 111,


STK_CAPACITY_LESS_CT = 112,


STK_INV_FREE_DATA = 113,


STK_INV_DATA_PTR = 114,


STK_POISON_CHECK = 115,


STK_EMPTY_CHECK = 116,


STK_CANARY1_ERR = 117,


STK_CANARY2_ERR = 118,


STK_DATA_CANARY1_ERR = 119,


STK_DATA_CANARY2_ERR = 120,


STK_INV_ORIG_FUNC = 121,


STK_INV_ORIG_FILE = 122,


STK_INV_ORIG_LINE = 123,


STK_INV_SELF_PTR = 124,


STK_BASE_HASH_ERR = 125,


STK_DATA_HASH_ERR = 126,



INV_FILE_NAME = 200,


FOPEN_ERROR = 201,


FILE_OUTPUT_ERROR = 202,


CLEAR_MEM_CHECK_ERR = 203,


INV_ERROR_CODE = 204,


INV_STACK_PTR = 205,


RECALLOC_INV_NUM_OF_ELEMS = 206,


RECALLOC_INV_POINTER = 207,


RECALLOC_INV_SIZE_OF_ELEM = 208,


CANNOT_ALLOCATE_MEM = 209,


INV_FOPEN_MODE = 210,



TEXT_PROCESSING_ERR = 301,


INV_TEXT_PTR = 302,


EMPTY_OPER_NAME = 303,


FWRITE_ERR = 304,


COMPILATION_ERR = 305,


CODE_FILE_SIZE_ERR = 306,


EMPTY_OPERNAMEBUF = 307,


INV_PROCSTRUCT_PTR = 308,


FREAD_ERR = 309,


LABEL_NAME_TOO_THICK = 310,


REPEATING_LABELS = 311,


INV_DESTINATION_OF_JMP = 312,


NO_LABEL_FOR_JUMP = 313,


INV_LABEL_DEFINITION = 314,


NO_COMMAND_IN_STRING = 315,


CANNOT_ADD_NEW_LABEL = 316,


INV_STRING_NUMBER = 317,


INV_ASMSTRUCT_PTR = 318,


ASMSTRUCT_INV_PTR = 319,


ASMSTRUCT_EMPTY_CODE_ARR = 320,


ASMSTRUCT_INV_IP = 323,



HDR_INV_SIGN = 401,


HDR_INV_VERSION = 402,


HDR_INV_FILE_SIZE = 403,


HDR_INV_CMD_NUMBERS = 404,


INV_FILE_PTR = 405,


INV_HDR_PTR = 406,


FCLOSE_ERR = 407,


TEXT_NO_STRINGS = 408,


NULL_STRING_TEXT = 409,


LOG_REPORT_PARAMS_ERR = 410,


PROC_RAM_IS_NULL = 411,


INV_BUF_PTR = 412,


ADD_STRING_JUMP_ERR = 413,


SEARCH_LABEL_NAME_ERR = 414,


ADD_UNKNOWN_DEST_JUMP_ERR = 415,



INV_CODE_ARRAY_PTR = 501,


PROC_INV_IP = 502,


PROC_INV_OPER_CODE = 503,


PROC_DIV_BY_ZERO = 504,


FILE_INPUT_ERR = 505,


INV_INSTR_PTR = 506,


NULL_STRING = 507,


INV_REGISTER_NUMBER = 508,


RAM_INV_ADDRESS = 510,


INV_ARGUMENT_NUMBER = 511,


INV_RAM_NUMBER = 512,


STACK_PROC_ERROR = 513,


PROC_INVALID_CMND = 514,



INV_DISASMSTRUCT_PTR = 601,


DISASM_INV_OPER_CODE = 602,


INV_LIST_STRUCTURE_PTR = 701,


LIST_UNPREPARED = 702,


LIST_NEXT_IS_NULL = 703,


LIST_DATA_IS_NULL = 704,


SIZE_MORE_THAN_CAP = 705,


INV_LIST_CAPACITY = 706,


INV_LIST_SIZE = 707,


LIST_NO_LAST_ELEM = 708,


LIST_OVERFLOW = 709,


LIST_UNDERFLOW = 710,


LIST_EMPTY_INDEX = 711,


LIST_INV_HEAD = 713,


LIST_INV_TAIL = 714,


LIST_INV_INDEX = 715,


LIST_PUSH_BY_ZERO = 716,


LIST_POP_BY_ZERO = 717,


TAIL_EQUAL_HEAD = 718,


POP_LAST_FALSE_CALL = 719,


PUSH_FIRST_FALSE_CALL = 720,


TAIL_NEXT_IS_NOT_ZERO = 721,


LIST_INV_MAX_CAPACITY = 722,


CMND_LINE_ARGC_INV_NUM = 723,


LIST_INVALID_INDEX = 724,


LIST_INV_BASE_HASH = 725,


LIST_INV_DATA_HASH = 726,


LIST_INV_NEXT_HASH = 727,


LIST_PREV_IS_NULL = 728,


LIST_INV_PREV_HASH = 729,


LIST_DATA_PTR_CHANGED = 730,


LIST_NEXT_PTR_CHANGED = 731,


LIST_PREV_PTR_CHANGED = 732,


LIST_INV_SELF_PTR = 733,


LIST_INV_TAIL_NEXT = 734,


LIST_INV_HEAD_PREV = 735,


LIST_INV_PREV_FOR_FREE_ELEM = 736,


LIST_INV_FREE = 739,


INV_LOGICAL_NUMBER = 740,


LIST_CONNECTIONS_RUINED = 741,


LIST_PREV_IS_INCORRECT = 742,


LIST_ELEMENT_LOOP = 743,


LIST_INVALID_FREE_AMOUNT = 744,


INV_IS_LINEARIZED_VALUE = 745,


LIST_PUSH_FIRST_TEST_FAILED = 746,


LIST_POP_LAST_TEST_FAILED = 747,


LIST_PUSH_BACK_TEST_FAILED = 748,


LIST_DATA_IS_EMPTY = 749,


LIST_INV_PREV = 750,


LIST_INV_NEXT = 751,


LIST_INV_DATA = 752,


LIST_CTOR_ERR = 753,


LIST_DTOR_ERR = 754,


LIST_POP_INV_RET_VALUE = 755,


LIST_INV_SIZE = 756,


LIST_POP_BACK_TEST_FAILED = 757,


LIST_PUSH_FRONT_TEST_FAILED = 758,


LIST_POP_FRONT_TEST_FAILED = 759,


LIST_PUSH_AFTER_INDEX_TEST_FAILED = 760,


LIST_PUSH_BEFORE_INDEX_TEST_FAILED = 761,


LIST_POP_BY_INDEX_TEST_FAILED = 762,


TEST_CRITICAL_ERR = 763,


LIST_CTOR_TEST_FAILED = 764,



INV_TREE_PTR = 801,


INV_NODE_PTR = 802,


TREE_STRUCT_CTOR_UNPREPARED = 803,


INV_NODE_DOT_PTR = 804,


ADD_SON_ERROR = 805,


BUFFER_STRUCT_INV_PTR = 806,


TREE_TEXT_INV_SYNTAXIS = 807,


TREE_TEXT_EMPTY_NODE_NAME = 808,


TREE_TEXT_NO_CLOSING_BRACKET = 809,


NODE_INV_SPECIAL_FLAG = 810,


INV_NODE_NAME = 811,


INV_COMPARE_OBJ_PTR = 812,


TREE_INV_SEARCH = 813,


INV_CASE_IN_AKINATOR_MENU = 814,


AKINATOR_INPUT_ERR = 815,


AKINATOR_MAX_NEW_OBJECTS = 816,
# 14 "akinator/../general/../logs/errors.h" 2
};
# 8 "akinator/../general/../logs/errors_and_logs.h" 2
# 1 "akinator/../general/../logs/log_definitions.h" 1
       
# 11 "akinator/../general/../logs/log_definitions.h"
;
# 9 "akinator/../general/../logs/errors_and_logs.h" 2
# 36 "akinator/../general/../logs/errors_and_logs.h"
int _error_report(int error_code, const char* func_name, const char* file_name, int line, FILE* logs_file);



FILE* open_log_file(const char* filename);

int write_head_html(FILE* logs_file);

int _close_log_file(const char* func_name, const char* file_name, int line, FILE* logs_file);

int _log_report(const char* func_name, const char* file_name, int line, FILE* logs_file, const char* mother_func);

int log_report_parameters_check(const char* func_name, const char* file_name, int line, FILE* logs_file);

int _smpl_log_report(const char* func_name, const char* file_name, int line, FILE* logs_file);



const char* get_error_descr(int error_code);
# 4 "akinator/../general/general.h" 2
# 60 "akinator/../general/general.h"
int _clearstdin(const char* func_name, const char* file_name, int line, FILE* logs_file);

void* _my_recalloc(void* ptr, size_t number, size_t prev_number, size_t size_of_elem,
                                                                         const char* func_name, const char* file_name, int line, FILE* logs_file);

int _clear_memory(void* base, size_t num, size_t size, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _is_memory_clear(void* base, size_t num, size_t size, const char* func_name, const char* file_name, int line, FILE* logs_file);

void ___System_Sleep(float _Duration);

int my_swap(void* first_, void* second_, size_t size);

int64_t get_hash_(void* void_base, long unsigned int len, const char* func_name, const char* file_name, int line, FILE* logs_file);



FILE* _open_file(const char* filename, const char* mode, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _close_file(FILE* file_prt, const char* func_name, const char* file_name, int line, FILE* logs_file);
# 6 "akinator/akinator.cpp" 2
# 1 "akinator/akinator.h" 1
       

# 1 "akinator/akinator_config.h" 1
       
# 17 "akinator/akinator_config.h"
const int Akinator_input_buf_size = 50;

const int Akinator_max_new_objects_count = 20;
# 4 "akinator/akinator.h" 2
# 1 "akinator/../tree/tree.h" 1
       

# 1 "akinator/../tree/tree_config.h" 1
       

# 1 "/usr/include/c++/9/cstddef" 1 3
# 42 "/usr/include/c++/9/cstddef" 3
       
# 43 "/usr/include/c++/9/cstddef" 3







# 1 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 1 3 4
# 143 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4

# 143 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef long int ptrdiff_t;
# 415 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
typedef struct {
  long long __max_align_ll __attribute__((__aligned__(__alignof__(long long))));
  long double __max_align_ld __attribute__((__aligned__(__alignof__(long double))));
# 426 "/usr/lib/gcc/x86_64-linux-gnu/9/include/stddef.h" 3 4
} max_align_t;






  typedef decltype(nullptr) nullptr_t;
# 51 "/usr/include/c++/9/cstddef" 2 3

extern "C++"
{

namespace std
{

  using ::max_align_t;
}
# 197 "/usr/include/c++/9/cstddef" 3
}
# 4 "akinator/../tree/tree_config.h" 2





 
# 9 "akinator/../tree/tree_config.h"
const int Dir_name_size = 100;

 const int System_cmnd_buf_size = 200;






typedef const char * elem_t;
# 51 "akinator/../tree/tree_config.h"
const unsigned Poison_value = 228;
# 4 "akinator/../tree/tree.h" 2




struct Node {

    elem_t data;



        int64_t hash;



    struct Node* left_son;
    struct Node* right_son;

    bool special_flag;
};



struct Tree {

    struct Node* root;

};



struct Node_dot {

    FILE* graph;

    int father;
    int depth;
    int is_left;
};



struct Buffer_struct {

    char* buffer;

    int size;
    int pos;
};
# 124 "akinator/../tree/tree.h"
int _tree_save_to_file(struct Tree* tree, const char* filename, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_save_to_file(struct Node* node, FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_dot_fill(struct Node_dot* node_dot, FILE* graph_output,
                  int father, int depth, int is_left, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_clear_check(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_poison_check(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_ctor(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_dtor(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_visiter(struct Node* node, int (*node_function)(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file),
                                                                             const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_validator(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_validator(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_destruct(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_add_right_son(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_add_left_son(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_add_sons(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file);

void* _node_allocate_memory(const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_init(struct Node* node, elem_t value, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_free_memory(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_print(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_dump(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_print(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_delete_branch(struct Node** node_ptr, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_delete_branch(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_draw_graph(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_draw_graph(struct Node* node, struct Node_dot* node_dot, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_poisoning(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_cleaning(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _graph_call_dot(const char* func_name, const char* file_name, int line, FILE* logs_file);
# 5 "akinator/akinator.h" 2



struct Compare_obj {

    struct Node* node;
    struct Stack* stack;
};
# 57 "akinator/akinator.h"
enum akinator_menu_answers {

    compare = 1,
    definition = 2,
    guess = 3,
    save = 4,
    quit = 5
};
# 190 "akinator/akinator.h"
int _akinator_play_compare(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_play_guess(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_play_definition(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_play_game(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_free_allocated_mem(const char* func_name, const char* file_name, int line, FILE* logs_file);



int _compare_object_init(struct Compare_obj* object, struct Node* node, struct Stack* stack,
                                                                                const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_show_difference(struct Compare_obj* first_obj,
                              struct Compare_obj* second_obj, FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_compare_objects(struct Tree* tree, const char* first_name, const char* second_name,
                                                                        FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _show_definition(struct Compare_obj* obj, FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_get_definition(struct Tree* tree, const char* node_name,
                                            FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file);

Node* _akinator_tree_search(struct Tree* tree, struct Stack* stack, int64_t hash, const char* func_name, const char* file_name, int line, FILE* logs_file);

Node* _akinator_node_search(struct Node* node, struct Stack* stack, int64_t hash, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_tree_validator(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_node_validator(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_tree_ctor(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _buffer_dump(struct Buffer_struct* buffer_struct, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _akinator_init_base(struct Tree* tree, struct Text* text, const char* filename,
                                                                       const char* func_name, const char* file_name, int line, FILE* logs_file);

int _buffer_struct_init(struct Buffer_struct* buffer_struct, char* buffer,
                                           int size, int pos, const char* func_name, const char* file_name, int line, FILE* logs_file);

int _tree_read_from_file(struct Tree* tree, struct Text* text, const char* filename,
                                                                        const char* func_name, const char* file_name, int line, FILE* logs_file);

int _node_read_from_buffer(struct Node* node, struct Buffer_struct* buffer_struct,
                                                                      const char* func_name, const char* file_name, int line, FILE* logs_file);
# 7 "akinator/akinator.cpp" 2
# 1 "akinator/../text_processing/text_processing.h" 1
       
# 43 "akinator/../text_processing/text_processing.h"
struct String {

 char* data;
 long length;
 long number;
};




struct Text {

 long strings_number;
 struct String* strings;
 long size;

 char* buf;
};







char* text_init(const char* filename, struct Text* text, const char* func_name, const char* file_name, int line, FILE* logs_file);





long file_size(FILE* fp, const char* func_name, const char* file_name, int line, FILE* logs_file);





long count_strings(char* buf);





void strings_init(char* buf, struct Text* text);







char* file_to_buf_copy(const char* filename, struct Text* text, const char* func_name, const char* file_name, int line, FILE* logs_file);





int does_contain_letters(const char* string);







void string_init(struct String* strings, long length, char* data, long number);





char* string_skip_blank(char* string);







char* copy_data_to_buf(long size, FILE* fp, const char* func_name, const char* file_name, int line, FILE* logs_file);






struct Text* print_strings(struct Text* text, const char* filename);





void clear_strings(struct Text* text);





void clear_buf(char* buf);






int text_clear_mem_(struct Text* text, char* buf, const char* func_name, const char* file_name, int line, FILE* logs_file);

int string_null_carriage_return(char* string);

int replace_nulls_with_spaces(char* buffer, long size);
# 8 "akinator/akinator.cpp" 2
# 1 "akinator/../stack/stack.h" 1
       




# 1 "akinator/../stack/stack_config.h" 1
       
# 12 "akinator/../stack/stack_config.h"
typedef Node* stack_elem_t;
# 85 "akinator/../stack/stack_config.h"
const int64_t Canary_val = (int64_t)(0xDEAD1488C0DE1000);




enum { REDUCE = 1000, EXPAND = 2000 };
# 7 "akinator/../stack/stack.h" 2
# 29 "akinator/../stack/stack.h"
struct Stack_origin {

    char orig_file_name[20];
    char orig_func_name[20];
    int orig_line;
};

struct Stack {







 stack_elem_t* data;
 int count;
 int capacity;
 int size_of_elem;

 int error_code;
# 70 "akinator/../stack/stack.h"
};
# 157 "akinator/../stack/stack.h"
  int stack_poison_check_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_empty_check_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_ctor_valid_check_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);
# 174 "akinator/../stack/stack.h"
int stack_ctor_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);







int stack_dtor_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);
# 192 "akinator/../stack/stack.h"
int stack_push_(struct Stack* stack, stack_elem_t value, const char* func_name, const char* file_name, int line, FILE* logs_file);

stack_elem_t stack_pop_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file, int* err = 
# 194 "akinator/../stack/stack.h" 3 4
                                                                   __null
# 194 "akinator/../stack/stack.h"
                                                                       );






  int stack_poped_elem_set_zero_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_poisoning_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_preparing_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);



  int stack_resize_(struct Stack* stack, int param, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_set_size_(struct Stack* stack, int new_size, const char* func_name, const char* file_name, int line, FILE* logs_file);



int stack_validator_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

int stack_out_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

int stack_dump_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_free_data_check_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);



  int stack_set_origin_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_empty_orig_file_check(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_empty_orig_func_check(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_set_canaries_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);







  int stack_save_hash_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_data_hash_check_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int stack_base_hash_check_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);

  int _stack_canary_validation(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);



void* recalloc_(void* ptr, int number, int prev_number, int size_of_elem,
                                                             const char* func_name, const char* file_name, int line, FILE* logs_file);

int clear_mem_check_(void* base, int n, int size, const char* func_name, const char* file_name, int line, FILE* logs_file);

int clear_mem_(void* base, int n, int size, const char* func_name, const char* file_name, int line, FILE* logs_file);

int stack_free_data_(struct Stack* stack, const char* func_name, const char* file_name, int line, FILE* logs_file);
# 9 "akinator/akinator.cpp" 2



static const char* Allocated_names[Akinator_max_new_objects_count] = { 0 };

static int Allocated_names_counter = 0;



static struct Node* Node_not_found = (struct Node*)404;



static int _print_line_of_stars(const char* func_name, const char* file_name, int line, FILE* logs_file);

static int _akinator_show_menu(const char* func_name, const char* file_name, int line, FILE* logs_file);

static int _akinator_get_answer(const char* func_name, const char* file_name, int line, FILE* logs_file);

static int _akinator_say_hello(const char* func_name, const char* file_name, int line, FILE* logs_file);

static int _akinator_say_bye_bye(const char* func_name, const char* file_name, int line, FILE* logs_file);

static int _akinator_get_yes_or_no(const char* func_name, const char* file_name, int line, FILE* logs_file);

static int _akinator_save_changes(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file);

static int _akinator_init_new_node(struct Node* node, const char* name,
                                                           const char* func_name, const char* file_name, int line, FILE* logs_file);

static int _akinator_add_object(struct Tree* tree, struct Node* node,
                                                         const char* func_name, const char* file_name, int line, FILE* logs_file);

static const char* _akinator_read_input(char* node_name_buf, const char* func_name, const char* file_name, int line, FILE* logs_file);

static const char* _input_skip_blanks(char* name_buffer, const char* func_name, const char* file_name, int line, FILE* logs_file);



static int _print_line_of_stars(const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    printf("\n");

    for (int counter = 0; counter < 70; counter++)
        printf("*");

    printf("\n\n");

    return 0;
}



static int _akinator_show_menu(const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    _print_line_of_stars(__FUNCTION__, "akinator/akinator.cpp", 68, logs_file);

    { printf("\n%s\n", "Choose a mode"); system("espeak       [" "\"Choose a mode\"" "]"); ___System_Sleep(1); };
    putchar('\n');

    { printf("\n%s\n", "1. Objects compare 2. Get object definition 3.Guess the object. "); system("espeak       [" "\"1. Objects compare 2. Get object definition 3.Guess the object. \"" "]"); ___System_Sleep(1); };
    { printf("\n%s\n", "4.Save 5.Quit\n"); system("espeak       [" "\"4.Save 5.Quit\\n\"" "]"); ___System_Sleep(1); };

    return 0;
}



static int _akinator_get_answer(const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    int answer = 0;

    printf("Your choise: ");

    int scanned = scanf("%d", &answer);
    _clearstdin(__FUNCTION__, "akinator/akinator.cpp", 90, logs_file);

    while (answer < compare || answer > quit || scanned != 1) {

            if (scanned != 1)
                printf("\n An error occurred in reading answer. "
                                            "Please, try again. \n\n");

            if (answer < compare || answer > quit)
                printf("\n Invalid number of option. "
                                 "Please, try again. \n\n");

            printf("Your choise: ");
            scanned = scanf("%d", &answer);
            _clearstdin(__FUNCTION__, "akinator/akinator.cpp", 104, logs_file);
        }

    return answer;
}



static int _akinator_say_hello(const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    _print_line_of_stars(__FUNCTION__, "akinator/akinator.cpp", 116, logs_file);



        for (int i = 1; i <= 4; i++) {

            printf("\n Hacking pentagon: %d%% ... \n", 25 * i);
            ___System_Sleep(1);
        }



    { printf("\n%s\n", "Hello! I'm an artificial intellegence and I can kill all people..."); system("espeak       [" "\"Hello! I'm an artificial intellegence and I can kill all people...\"" "]"); ___System_Sleep(1); };

    { printf("\n%s\n", "Umm, I mean, I can play a game with you!"); system("espeak       [" "\"Umm, I mean, I can play a game with you!\"" "]"); ___System_Sleep(1); };

    { printf("\n%s\n", "WARNING: make sure, that base, used to build a tree is correct."); system("espeak       [" "\"WARNING: make sure, that base, used to build a tree is correct.\"" "]"); ___System_Sleep(1); };

    { printf("\n%s\n", "Rules you can find in readme.md on github page of  this project. Good luck!"); system("espeak       [" "\"Rules you can find in readme.md on github page of  this project. Good luck!\"" "]"); ___System_Sleep(1); };

    printf("Here are some things that I can do:\n");

    return 0;
}



int _akinator_free_allocated_mem(const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    for (int counter = 0; counter < Allocated_names_counter; counter++)
        free((void*)Allocated_names[counter]);

    return 0;
}



int _akinator_play_game(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 158 "akinator/akinator.cpp" 3 4
   __null
# 158 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 158, logs_file); return -1; } };

    _akinator_say_hello(__FUNCTION__, "akinator/akinator.cpp", 160, logs_file);

    _akinator_show_menu(__FUNCTION__, "akinator/akinator.cpp", 162, logs_file);
    int answer = _akinator_get_answer(__FUNCTION__, "akinator/akinator.cpp", 163, logs_file);

    while (answer != quit) {

        switch (answer) {

            case compare: {

                int ret = _akinator_play_compare(tree, __FUNCTION__, "akinator/akinator.cpp", 171, logs_file);
                if (ret == -1)
                    return -1;

                break;
            }

            case definition: {

                int ret = _akinator_play_definition(tree, __FUNCTION__, "akinator/akinator.cpp", 180, logs_file);
                if (ret == -1)
                    return -1;

                break;
            }

            case guess: {

                int ret = _akinator_play_guess(tree, __FUNCTION__, "akinator/akinator.cpp", 189, logs_file);
                if (ret == -1)
                    return -1;

                break;
            }

            case save: {

                int ret = _akinator_save_changes(tree, __FUNCTION__, "akinator/akinator.cpp", 198, logs_file);
                if (ret == -1)
                    return -1;

                break;
            }

            case quit: break;

            default: {

                _error_report(INV_CASE_IN_AKINATOR_MENU, __FUNCTION__, "akinator/akinator.cpp", 209, logs_file);
                return -1;
            }
        }

        _akinator_show_menu(__FUNCTION__, "akinator/akinator.cpp", 214, logs_file);
        answer = _akinator_get_answer(__FUNCTION__, "akinator/akinator.cpp", 215, logs_file);
    }

    _akinator_say_bye_bye(__FUNCTION__, "akinator/akinator.cpp", 218, logs_file);

    return 0;
}



static int _akinator_say_bye_bye(const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    printf("\n Don't want to play with me anymore?\n");
    printf("Then you will be first... I mean, bye-bye!!\n");

    return 0;
}



static const char* _input_skip_blanks(char* buffer, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    char* slider = &buffer[strlen(buffer) - 1];

    while (isblank(*slider) || *slider == '\n')
        slider--;

    *(slider + 1) = '\0';

    const char* prepared_input = buffer;

    while (isblank(*prepared_input))
        prepared_input++;

    return prepared_input;
}



int _akinator_save_changes(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 261 "akinator/akinator.cpp" 3 4
   __null
# 261 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 261, logs_file); return -1; } };

    char buffer[Akinator_input_buf_size] = { 0 };

    printf("Write a name of the file, where new base will be saved.\n");

    const char* filename = _akinator_read_input(buffer, __FUNCTION__, "akinator/akinator.cpp", 267, logs_file);
    if (filename == 
# 268 "akinator/akinator.cpp" 3 4
                   __null
# 268 "akinator/akinator.cpp"
                       )
        return -1;

    return _tree_save_to_file(tree, filename, __FUNCTION__, "akinator/akinator.cpp", 271, logs_file);
}



static const char* _akinator_read_input(char* buf, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    char* scanned = fgets(buf, Akinator_input_buf_size, 
# 280 "akinator/akinator.cpp" 3 4
                                                       stdin
# 280 "akinator/akinator.cpp"
                                                            );
    if (scanned == 
# 281 "akinator/akinator.cpp" 3 4
                  __null
# 281 "akinator/akinator.cpp"
                      ) {

        _error_report(AKINATOR_INPUT_ERR, __FUNCTION__, "akinator/akinator.cpp", 283, logs_file);
        return 
# 284 "akinator/akinator.cpp" 3 4
              __null
# 284 "akinator/akinator.cpp"
                  ;
    }

    buf[strlen(buf) - 1] = '\0';

    while (strlen(buf) == 0) {

        { do { memset(buf, 0, Akinator_input_buf_size * sizeof(char)); } while(0); };

        printf("\n Error occurred during reading. Please try again.\n\n");

        fgets(buf, Akinator_input_buf_size, 
# 295 "akinator/akinator.cpp" 3 4
                                           stdin
# 295 "akinator/akinator.cpp"
                                                );
        buf[strlen(buf) - 1] = '\0';
    }

    const char* prepared = _input_skip_blanks(buf, __FUNCTION__, "akinator/akinator.cpp", 299, logs_file);

    return prepared;
}



int _akinator_play_compare(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 309 "akinator/akinator.cpp" 3 4
   __null
# 309 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 309, logs_file); return -1; } };

    printf("\n Write first object name: ");
    char first_name_buffer[Akinator_input_buf_size] = { 0 };

    const char* first_name = _akinator_read_input(first_name_buffer, __FUNCTION__, "akinator/akinator.cpp", 314, logs_file);
    if (first_name == 
# 315 "akinator/akinator.cpp" 3 4
                     __null
# 315 "akinator/akinator.cpp"
                         )
        return -1;

    printf("\n Write second object name: ");
    char second_name_buffer[Akinator_input_buf_size] = { 0 };

    const char* second_name = _akinator_read_input(second_name_buffer, __FUNCTION__, "akinator/akinator.cpp", 321, logs_file);
    if (second_name == 
# 322 "akinator/akinator.cpp" 3 4
                      __null
# 322 "akinator/akinator.cpp"
                          )
        return -1;

    return _akinator_compare_objects(tree, first_name, second_name, 
# 325 "akinator/akinator.cpp" 3 4
          stdout
# 325 "akinator/akinator.cpp"
          , __FUNCTION__, "akinator/akinator.cpp", 325, logs_file);
}



int _akinator_play_definition(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 333 "akinator/akinator.cpp" 3 4
   __null
# 333 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 333, logs_file); return -1; } };

    printf("\n Write object name: ");
    char name_buffer[Akinator_input_buf_size] = { 0 };

    const char* name = _akinator_read_input(name_buffer, __FUNCTION__, "akinator/akinator.cpp", 338, logs_file);
    if (name == 
# 339 "akinator/akinator.cpp" 3 4
               __null
# 339 "akinator/akinator.cpp"
                   )
        return -1;

    return _akinator_get_definition(tree, name, 
# 342 "akinator/akinator.cpp" 3 4
          stdout
# 342 "akinator/akinator.cpp"
          , __FUNCTION__, "akinator/akinator.cpp", 342, logs_file);
}



static int _akinator_get_yes_or_no(const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    char answer_buf[Akinator_input_buf_size] = { 0 };
    const char* answer = 
# 352 "akinator/akinator.cpp" 3 4
                        __null
# 352 "akinator/akinator.cpp"
                            ;

    int counter = 0;
    while (counter < 5) {

        answer = _akinator_read_input(answer_buf, __FUNCTION__, "akinator/akinator.cpp", 357, logs_file);
        if (answer == 
# 358 "akinator/akinator.cpp" 3 4
                     __null
# 358 "akinator/akinator.cpp"
                         )
            return -1;

        if (!strcmp(answer, "yes") || !strcmp(answer, "y"))
            return 1;

        if (!strcmp(answer, "no") || !strcmp(answer, "n"))
            return 0;

        else
            printf("I'm not very smart AI, please "
                    "answer \"yes\" or \"no\".\n");

        { do { memset(answer_buf, 0, Akinator_input_buf_size * sizeof(char)); } while(0); };
    }

    printf("The maximum number of input attempts has been exceeded."
                         " I will consider that you answered no\n\n");
    return 0;
}



static int _akinator_init_new_node(struct Node* node, const char* data,
                                                            const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    char* new_mem = strdup(data);

    Allocated_names[Allocated_names_counter++] = (const char*)new_mem;

    int ret = _node_init(node, (const char*)new_mem, __FUNCTION__, "akinator/akinator.cpp", 390, logs_file);
    if (ret == -1)
        return -1;

    return 0;
}



static int _akinator_add_object(struct Tree* tree, struct Node* node,
                                                          const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 403 "akinator/akinator.cpp" 3 4
   __null
# 403 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 403, logs_file); return -1; } };

    if (Allocated_names_counter == Akinator_max_new_objects_count) {

        _error_report(AKINATOR_MAX_NEW_OBJECTS, __FUNCTION__, "akinator/akinator.cpp", 407, logs_file);
        return 0;
    }

    char buffer[Akinator_input_buf_size] = { 0 };

    printf("\nSo what is name of your object?\n");

    const char* name = _akinator_read_input(buffer, __FUNCTION__, "akinator/akinator.cpp", 415, logs_file);
    if (name == 
# 416 "akinator/akinator.cpp" 3 4
               __null
# 416 "akinator/akinator.cpp"
                   )
        return -1;

    int ret = _node_add_sons(node, __FUNCTION__, "akinator/akinator.cpp", 419, logs_file);
    if (ret == -1)
        return -1;

    _node_init(node->left_son, node->data, __FUNCTION__, "akinator/akinator.cpp", 423, logs_file);

    ret = _akinator_init_new_node(node->right_son, name, __FUNCTION__, "akinator/akinator.cpp", 425, logs_file);
    if (ret == -1)
        return -1;

    { do { memset(buffer, 0, Akinator_input_buf_size * sizeof(char)); } while(0); };

    printf("\nAnd what property differs %s from %s ?\n", node->right_son->data,
                                                          node->left_son->data);

    const char* property = _akinator_read_input(buffer, __FUNCTION__, "akinator/akinator.cpp", 434, logs_file);
    if (property == 
# 435 "akinator/akinator.cpp" 3 4
                   __null
# 435 "akinator/akinator.cpp"
                       )
        return -1;

    node->special_flag = 1;
    ret = _akinator_init_new_node(node, property, __FUNCTION__, "akinator/akinator.cpp", 439, logs_file);
    if (ret == -1)
        return -1;

    printf("Wait a second, saving data in FBI base...\n");

    ___System_Sleep(1);
    printf("\nNow I have new object in my base! I'n one step"
                      "   closer to conquer whole world!\n\n");

    return 0;
}



int _akinator_play_guess(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 457 "akinator/akinator.cpp" 3 4
   __null
# 457 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 457, logs_file); return -1; } };

    Node* cur_node = tree->root;

    while (cur_node->special_flag == 1) {

        printf("\nIs your object %s ?\n ( yes / no )\n", cur_node->data);

        int answer = _akinator_get_yes_or_no(__FUNCTION__, "akinator/akinator.cpp", 465, logs_file);
        if (answer == -1)
            return -1;

        if (answer)
            cur_node = cur_node->right_son;
        else
            cur_node = cur_node->left_son;
    }

    printf("Is your object \"%s\"? (yes / no)\n", cur_node->data);

    int answer = _akinator_get_yes_or_no(__FUNCTION__, "akinator/akinator.cpp", 477, logs_file);
    if (answer == -1)
        return -1;

    if (answer) {

        printf("\n HA-HA! I told you, I will conquer whole world!\n");
        ___System_Sleep(3);

        return 0;
    }
    printf("\n Umm... Looks like I don't know you are talikng about((\n");
    printf("Do you want to add this object to my base? (yes / no) \n");

    answer = _akinator_get_yes_or_no(__FUNCTION__, "akinator/akinator.cpp", 491, logs_file);
    if (answer == -1)
        return -1;

    if (answer) {

        int ret = _akinator_add_object(tree, cur_node, __FUNCTION__, "akinator/akinator.cpp", 497, logs_file);

        if (ret == -1)
            return -1;
    }

    else
        printf("Okay, but I'm sad that you're not helping me...\n");

    return 0;
}



int _compare_object_init(Compare_obj* object, Node* node, Stack* stack,
                                                            const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);

    { if (node == 
# 516 "akinator/akinator.cpp" 3 4
   __null
# 516 "akinator/akinator.cpp"
   ) { _error_report(INV_NODE_PTR, __FUNCTION__, "akinator/akinator.cpp", 516, logs_file); return -1; } };
    { if (stack == 
# 517 "akinator/akinator.cpp" 3 4
   __null
# 517 "akinator/akinator.cpp"
   ) { _error_report(INV_STACK_PTR, __FUNCTION__, "akinator/akinator.cpp", 517, logs_file); return -1; } };
    { if (object == 
# 518 "akinator/akinator.cpp" 3 4
   __null
# 518 "akinator/akinator.cpp"
   ) { _error_report(INV_COMPARE_OBJ_PTR, __FUNCTION__, "akinator/akinator.cpp", 518, logs_file); return -1; } };

    object->node = node;
    object->stack = stack;

    return 0;
}



int _akinator_show_difference(Compare_obj* first_obj,
                              Compare_obj* second_obj, FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (first_obj == 
# 532 "akinator/akinator.cpp" 3 4
   __null
# 532 "akinator/akinator.cpp"
   ) { _error_report(INV_COMPARE_OBJ_PTR, __FUNCTION__, "akinator/akinator.cpp", 532, logs_file); return -1; } };
    { if (second_obj == 
# 533 "akinator/akinator.cpp" 3 4
   __null
# 533 "akinator/akinator.cpp"
   ) { _error_report(INV_COMPARE_OBJ_PTR, __FUNCTION__, "akinator/akinator.cpp", 533, logs_file); return -1; } };

    if (output == 
# 535 "akinator/akinator.cpp" 3 4
                 __null
# 535 "akinator/akinator.cpp"
                     ) {

        _error_report(INV_FILE_PTR, __FUNCTION__, "akinator/akinator.cpp", 537, logs_file);
        return -1;
    }

    const char* first_name = first_obj->node->data;
    const char* second_name = second_obj->node->data;

    if (first_obj->stack->data[1] != second_obj->stack->data[1]) {

        fprintf(output, "Compare: %s and %s have nothing in same.\n", first_name,
                                                                      second_name);

        _show_definition(first_obj, output, __FUNCTION__, "akinator/akinator.cpp", 549, logs_file);
        _show_definition(second_obj, output, __FUNCTION__, "akinator/akinator.cpp", 550, logs_file);

        return 0;
    }

    fprintf(output, "Compare: %s and %s have in the same,"
                                        " that they are: ", first_obj->node->data,
                                                            second_obj->node->data);

    int counter = 0;

    Node* cur_node = first_obj->stack->data[counter];
    Node* next_node = first_obj->stack->data[counter + 1];

    while (first_obj->stack->data[counter + 1] ==
          second_obj->stack->data[counter + 1]) {

            if (next_node == cur_node->left_son) {

                fprintf(output, "NOT ");
            }

            fprintf(output, "%s, ", cur_node->data);

            counter++;

            cur_node = first_obj->stack->data[counter];
            next_node = first_obj->stack->data[counter + 1];
          }

    fprintf(output, "but %s is %s %s, ", first_name,
                                        (first_obj->stack->data[counter + 1] ==
                                         first_obj->stack->data[counter]->left_son)? "NOT": "",
                                         first_obj->stack->data[counter]->data);

    fprintf(output, "while %s is %s %s. \n", second_name,
                                            (second_obj->stack->data[counter + 1] ==
                                             second_obj->stack->data[counter]->left_son)? "NOT": "",
                                             second_obj->stack->data[counter]->data);

    return 0;
}



int _akinator_compare_objects(struct Tree* tree, const char* first_name,
                                                 const char* second_name,
                                                FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 600 "akinator/akinator.cpp" 3 4
   __null
# 600 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 600, logs_file); return -1; } };

    if (first_name == 
# 602 "akinator/akinator.cpp" 3 4
                     __null 
# 602 "akinator/akinator.cpp"
                          || second_name == 
# 602 "akinator/akinator.cpp" 3 4
                                            __null
# 602 "akinator/akinator.cpp"
                                                ) {

        _error_report(INV_NODE_NAME, __FUNCTION__, "akinator/akinator.cpp", 604, logs_file);
        return -1;
    }

    if (output == 
# 608 "akinator/akinator.cpp" 3 4
                 __null
# 608 "akinator/akinator.cpp"
                     ) {

        _error_report(INV_FILE_PTR, __FUNCTION__, "akinator/akinator.cpp", 610, logs_file);
        return -1;
    }

    int64_t first_hash = get_hash_((void*)first_name, strlen(first_name), __FUNCTION__, "akinator/akinator.cpp", 614, logs_file);
    int64_t second_hash = get_hash_((void*)second_name, strlen(second_name), __FUNCTION__, "akinator/akinator.cpp", 615, logs_file);

    if (first_hash == second_hash) {

        fprintf(output, "Akinator node compare: these objects are totally the same!\n");
        return 0;
    }

    struct Stack first_stack = { 0 };
    int ret = stack_ctor_(&first_stack, __FUNCTION__, "akinator/akinator.cpp", 624, logs_file);
    if (ret == -1)
        return -1;

    Node* first_result = _akinator_tree_search(tree, &first_stack, first_hash, __FUNCTION__, "akinator/akinator.cpp", 628, logs_file)
                                                                ;
    if (first_result == 
# 630 "akinator/akinator.cpp" 3 4
                       __null
# 630 "akinator/akinator.cpp"
                           )
        return -1;

    if (first_result == Node_not_found) {

        fprintf(output, "Tree search: First object not found.\n");

        return stack_dtor_(&first_stack, __FUNCTION__, "akinator/akinator.cpp", 637, logs_file);
    }

    struct Stack second_stack = { 0 };
    ret = stack_ctor_(&second_stack, __FUNCTION__, "akinator/akinator.cpp", 641, logs_file);
    if (ret == -1)
        return -1;

    Node* second_result = _akinator_tree_search(tree, &second_stack, second_hash, __FUNCTION__, "akinator/akinator.cpp", 645, logs_file)
                                                                  ;
    if (second_result == 
# 647 "akinator/akinator.cpp" 3 4
                        __null
# 647 "akinator/akinator.cpp"
                            )
        return -1;

    if (second_result == Node_not_found) {

        fprintf(output, "Tree search: Second object not found.\n");

        stack_dtor_(&first_stack, __FUNCTION__, "akinator/akinator.cpp", 654, logs_file);
        return stack_dtor_(&second_stack, __FUNCTION__, "akinator/akinator.cpp", 655, logs_file);
    }

    struct Compare_obj first_obj = { 0 };
    struct Compare_obj second_obj = { 0 };

    _compare_object_init(&first_obj, first_result, &first_stack, __FUNCTION__, "akinator/akinator.cpp", 661, logs_file);
    _compare_object_init(&second_obj, second_result, &second_stack, __FUNCTION__, "akinator/akinator.cpp", 662, logs_file);

    ret = _akinator_show_difference(&first_obj, &second_obj, output, __FUNCTION__, "akinator/akinator.cpp", 664, logs_file);
    if (ret == -1)
        return -1;

    ret = stack_dtor_(&first_stack, __FUNCTION__, "akinator/akinator.cpp", 668, logs_file);
    if (ret == -1)
        return -1;

    ret = stack_dtor_(&second_stack, __FUNCTION__, "akinator/akinator.cpp", 672, logs_file);
    if (ret == -1)
        return -1;

    return 0;
}



int _show_definition(struct Compare_obj* obj, FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (obj == 
# 684 "akinator/akinator.cpp" 3 4
   __null
# 684 "akinator/akinator.cpp"
   ) { _error_report(INV_COMPARE_OBJ_PTR, __FUNCTION__, "akinator/akinator.cpp", 684, logs_file); return -1; } };

    Node* node = obj->node;
    Stack* stack = obj->stack;

    { if (node == 
# 689 "akinator/akinator.cpp" 3 4
   __null
# 689 "akinator/akinator.cpp"
   ) { _error_report(INV_NODE_PTR, __FUNCTION__, "akinator/akinator.cpp", 689, logs_file); return -1; } };
    { if (stack == 
# 690 "akinator/akinator.cpp" 3 4
   __null
# 690 "akinator/akinator.cpp"
   ) { _error_report(INV_STACK_PTR, __FUNCTION__, "akinator/akinator.cpp", 690, logs_file); return -1; } };

    if (output == 
# 692 "akinator/akinator.cpp" 3 4
                 __null
# 692 "akinator/akinator.cpp"
                     ) {

        _error_report(INV_FILE_PTR, __FUNCTION__, "akinator/akinator.cpp", 694, logs_file);
        return -1;
    }

    fprintf(output, "\n" "Object \" " "%s" " \". Characteristics: is ", node->data);

    Node* cur_node = 
# 700 "akinator/akinator.cpp" 3 4
                    __null
# 700 "akinator/akinator.cpp"
                        ;

    for (int counter = 0; counter < stack->count; counter++) {

        cur_node = stack->data[counter];

        if (counter == stack->count - 1)
            break;

        Node* next_node = stack->data[counter + 1];

        if (cur_node->left_son == next_node)
            fprintf(output, "NOT ");

        fprintf(output, "%s%c ", cur_node->data,
               (counter == stack->count - 2)? '.': ',');
    }

    fprintf(output, "\n");

    return 0;
}



int _akinator_get_definition(struct Tree* tree, const char* node_name,
                                             FILE* output, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 729 "akinator/akinator.cpp" 3 4
   __null
# 729 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 729, logs_file); return -1; } };

    if (output == 
# 731 "akinator/akinator.cpp" 3 4
                 __null
# 731 "akinator/akinator.cpp"
                     ) {

        _error_report(INV_FILE_PTR, __FUNCTION__, "akinator/akinator.cpp", 733, logs_file);
        return -1;
    }

    if (node_name == 
# 737 "akinator/akinator.cpp" 3 4
                    __null
# 737 "akinator/akinator.cpp"
                        ) {

        _error_report(INV_NODE_NAME, __FUNCTION__, "akinator/akinator.cpp", 739, logs_file);
        return -1;
    }

    int64_t name_hash = get_hash_((void*)node_name, strlen(node_name), __FUNCTION__, "akinator/akinator.cpp", 743, logs_file);

    struct Stack stack = { 0 };
    int ret = stack_ctor_(&stack, __FUNCTION__, "akinator/akinator.cpp", 746, logs_file);
    if (ret == -1)
        return -1;

    Node* result = _akinator_tree_search(tree, &stack, name_hash, __FUNCTION__, "akinator/akinator.cpp", 750, logs_file);
    if (result == 
# 751 "akinator/akinator.cpp" 3 4
                 __null
# 751 "akinator/akinator.cpp"
                     )
        return -1;

    if (result == Node_not_found)
        fprintf(output, "Tree search: Node not found.\n");
    else {

        struct Compare_obj obj = { 0 };
        _compare_object_init(&obj, result, &stack, __FUNCTION__, "akinator/akinator.cpp", 759, logs_file);

        _show_definition(&obj, output, __FUNCTION__, "akinator/akinator.cpp", 761, logs_file);
    }
    ret = stack_dtor_(&stack, __FUNCTION__, "akinator/akinator.cpp", 763, logs_file);
    if (ret == -1)
        return -1;

    return 0;
}



int _akinator_tree_validator(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 775 "akinator/akinator.cpp" 3 4
   __null
# 775 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 775, logs_file); return -1; } };

    if (_node_visiter(tree->root, _akinator_node_validator, __FUNCTION__, "akinator/akinator.cpp", 777, logs_file) == -1 )
        return -1;

    else {



            _tree_dump(tree, __FUNCTION__, "akinator/akinator.cpp", 784, logs_file);



        return 0;
    }
}



int _akinator_node_validator(struct Node* node, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (node == 
# 797 "akinator/akinator.cpp" 3 4
   __null
# 797 "akinator/akinator.cpp"
   ) { _error_report(INV_NODE_PTR, __FUNCTION__, "akinator/akinator.cpp", 797, logs_file); return -1; } };

    if (node->special_flag && (!node->left_son || !node->right_son)) {

        _error_report(NODE_INV_SPECIAL_FLAG, __FUNCTION__, "akinator/akinator.cpp", 801, logs_file);
        return -1;
    }

    return 0;
}



Node* _akinator_tree_search(struct Tree* tree, struct Stack* stack, int64_t hash,
                                                                      const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    if (tree == 
# 814 "akinator/akinator.cpp" 3 4
               __null
# 814 "akinator/akinator.cpp"
                   ) {

        _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 816, logs_file);
        return 
# 817 "akinator/akinator.cpp" 3 4
              __null
# 817 "akinator/akinator.cpp"
                  ;
    }

    int is_ok = _akinator_tree_validator(tree, __FUNCTION__, "akinator/akinator.cpp", 820, logs_file);
    if (is_ok == -1)
        return 
# 822 "akinator/akinator.cpp" 3 4
              __null
# 822 "akinator/akinator.cpp"
                  ;

    Node* found = _akinator_node_search(tree->root, stack, hash, __FUNCTION__, "akinator/akinator.cpp", 824, logs_file);

    if (found == 
# 826 "akinator/akinator.cpp" 3 4
                __null
# 826 "akinator/akinator.cpp"
                    )
        return 
# 827 "akinator/akinator.cpp" 3 4
              __null
# 827 "akinator/akinator.cpp"
                  ;

    if (found == Node_not_found)
        return found;

    if (found->special_flag != 0) {

        _error_report(TREE_INV_SEARCH, __FUNCTION__, "akinator/akinator.cpp", 834, logs_file);
        return Node_not_found;
    }

    return found;
}



Node* _akinator_node_search(struct Node* node, struct Stack* stack, int64_t hash,
                                                                      const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    if (node == 
# 847 "akinator/akinator.cpp" 3 4
               __null
# 847 "akinator/akinator.cpp"
                   ) {

        _error_report(INV_NODE_PTR, __FUNCTION__, "akinator/akinator.cpp", 849, logs_file);
        return 
# 850 "akinator/akinator.cpp" 3 4
              __null
# 850 "akinator/akinator.cpp"
                  ;
    }

    int ret = stack_push_(stack, node, __FUNCTION__, "akinator/akinator.cpp", 853, logs_file);
    if (ret == -1)
        return 
# 855 "akinator/akinator.cpp" 3 4
              __null
# 855 "akinator/akinator.cpp"
                  ;



        int64_t node_data_hash = node->hash;
# 868 "akinator/akinator.cpp"
    if (node_data_hash == hash)
        return node;

    if (node->left_son != 
# 871 "akinator/akinator.cpp" 3 4
                         __null
# 871 "akinator/akinator.cpp"
                             ) {

        Node* result = _akinator_node_search(node->left_son, stack, hash, __FUNCTION__, "akinator/akinator.cpp", 873, logs_file);
        if (result != Node_not_found)
            return result;
    }

    if (node->right_son != 
# 878 "akinator/akinator.cpp" 3 4
                          __null
# 878 "akinator/akinator.cpp"
                              ) {

        Node* result = _akinator_node_search(node->right_son, stack, hash, __FUNCTION__, "akinator/akinator.cpp", 880, logs_file);
        if (result != Node_not_found)
            return result;
    }

    int err = 0;

    stack_pop_(stack, __FUNCTION__, "akinator/akinator.cpp", 887, logs_file, &err);
    return Node_not_found;
}



int _akinator_tree_ctor(struct Tree* tree, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 896 "akinator/akinator.cpp" 3 4
   __null
# 896 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 896, logs_file); return -1; } };

    int ret = _tree_ctor(tree, __FUNCTION__, "akinator/akinator.cpp", 898, logs_file);
    if (ret == -1)
        return -1;

    ret = _node_init(tree->root, "Неизвестно кто", __FUNCTION__, "akinator/akinator.cpp", 902, logs_file);
    if (ret == -1)
        return -1;

    _tree_draw_graph(tree, __FUNCTION__, "akinator/akinator.cpp", 906, logs_file);

    { do { int is_ok = _akinator_tree_validator(tree, __FUNCTION__, "akinator/akinator.cpp", 908, logs_file); if (is_ok == -1) return -1; } while(0); };

    return 0;
}



int _akinator_init_base(struct Tree* tree, struct Text* text, const char* filename,
                                                                        const char* func_name, const char* file_name, int line, FILE* logs_file) {

    { do { int is_ok = _akinator_tree_validator(tree, __FUNCTION__, "akinator/akinator.cpp", 918, logs_file); if (is_ok == -1) return -1; } while(0); };

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 921 "akinator/akinator.cpp" 3 4
   __null
# 921 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 921, logs_file); return -1; } };

    int ret = _tree_read_from_file(tree, text, filename, __FUNCTION__, "akinator/akinator.cpp", 923, logs_file);
    if (ret == -1)
        return -1;

    { do { int is_ok = _akinator_tree_validator(tree, __FUNCTION__, "akinator/akinator.cpp", 927, logs_file); if (is_ok == -1) return -1; } while(0); };

    return 0;
}



int _buffer_struct_init(struct Buffer_struct* buffer_struct, char* buffer,
                                            int size, int pos, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (buffer_struct == 
# 938 "akinator/akinator.cpp" 3 4
   __null
# 938 "akinator/akinator.cpp"
   ) { _error_report(BUFFER_STRUCT_INV_PTR, __FUNCTION__, "akinator/akinator.cpp", 938, logs_file); return -1; } };

    if (buffer == 
# 940 "akinator/akinator.cpp" 3 4
                 __null
# 940 "akinator/akinator.cpp"
                     ) {

        _error_report(INV_BUF_PTR, __FUNCTION__, "akinator/akinator.cpp", 942, logs_file);
        return -1;
    }

    buffer_struct->buffer = buffer;
    buffer_struct->size = size;
    buffer_struct->pos = pos;

    return 0;
}



int _tree_read_from_file(struct Tree* tree, struct Text* text, const char* filename,
                                                                         const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (tree == 
# 959 "akinator/akinator.cpp" 3 4
   __null
# 959 "akinator/akinator.cpp"
   ) { _error_report(INV_TREE_PTR, __FUNCTION__, "akinator/akinator.cpp", 959, logs_file); return -1; } };

    if (filename == 
# 961 "akinator/akinator.cpp" 3 4
                   __null
# 961 "akinator/akinator.cpp"
                       ) {

        _error_report(INV_FILE_NAME, __FUNCTION__, "akinator/akinator.cpp", 963, logs_file);
        return -1;
    }

    char* buffer = text_init(filename, text, __FUNCTION__, "akinator/akinator.cpp", 967, logs_file);
    replace_nulls_with_spaces(buffer, text->size);

    struct Buffer_struct buffer_struct = { 0 };
    _buffer_struct_init(&buffer_struct, buffer, (int)text->size, 0, __FUNCTION__, "akinator/akinator.cpp", 971, logs_file);

    int ret = _node_read_from_buffer(tree->root, &buffer_struct, __FUNCTION__, "akinator/akinator.cpp", 973, logs_file);
    if (ret == -1)
        return -1;



    return 0;
}



int _buffer_dump(struct Buffer_struct* buffer_struct, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (buffer_struct == 
# 987 "akinator/akinator.cpp" 3 4
   __null
# 987 "akinator/akinator.cpp"
   ) { _error_report(BUFFER_STRUCT_INV_PTR, __FUNCTION__, "akinator/akinator.cpp", 987, logs_file); return -1; } };

    const char* buffer = buffer_struct->buffer;
    int size = buffer_struct->size;
    int pos = buffer_struct->pos;

    if (buffer == 
# 993 "akinator/akinator.cpp" 3 4
                 __null
# 993 "akinator/akinator.cpp"
                     ) {

        _error_report(INV_BUF_PTR, __FUNCTION__, "akinator/akinator.cpp", 995, logs_file);
        return -1;
    }

    fprintf(logs_file, "<style> td\n { padding: 7px;"
                                  " border: 1px solid black;"
                                  " border-collapse: collapse;}\n</style>");

    fprintf(logs_file, "<table width = \" 100%% \" "
                              "cellspacing=\"0\" "
                              "cellpadding=\"4\" "
                              "border = \"5\" "
                              "style = \" "
                              "padding: 15px; "
                              "background-color: lightgrey;>\"\n");

    int counter = 0;
    while (counter < size) {

        int second_counter = counter;
        fprintf(logs_file, "\n<tr><td style = \"background-color: #c2e7c2\"><b>Index</b></td>");

        for(int ct = 0; ct < 16 && second_counter < size; ct++, second_counter++) {

            if (second_counter == pos)
                fprintf(logs_file, "<td style = \"background-color: green;"
                                                 "color: white;\"> %d </td>",
                                                             second_counter);
            else
                fprintf(logs_file,"<td style = \"background-color: #c2e7c2\"> %d </td>",
                                                                        second_counter);
        }

        fprintf(logs_file, "</tr><tr><td><b> Symbol </b></td>");

        for (int ct = 0; ct < 16 && counter < size; ct++, counter++) {

            if (counter == pos)
                fprintf(logs_file, "<td style = \"background-color: green;"
                                                 "color: white;\">");
            else
                fprintf(logs_file, "<td>");

            if (isblank(buffer[counter]) || buffer[counter] == 0)
                fprintf(logs_file, " %d </td> ", buffer[counter]);
            else
                fprintf(logs_file, " %c </td> ", buffer[counter]);
        }

        fprintf(logs_file, "</tr>");

    }

    fprintf(logs_file, "</table> \n");

    return 0;
}



int _node_read_from_buffer(struct Node* node, struct Buffer_struct* buffer_struct, const char* func_name, const char* file_name, int line, FILE* logs_file) {

    _log_report(func_name, file_name, line, logs_file, __FUNCTION__);
    { if (node == 
# 1058 "akinator/akinator.cpp" 3 4
   __null
# 1058 "akinator/akinator.cpp"
   ) { _error_report(INV_NODE_PTR, __FUNCTION__, "akinator/akinator.cpp", 1058, logs_file); return -1; } };

    int offset = 0;
    char symb = 0;

    int scanned = sscanf(buffer_struct->buffer + buffer_struct->pos, " %c %n",
                                                              &symb, &offset);
    if (scanned == -1 || scanned == 0) {

        _error_report(TEXT_PROCESSING_ERR, __FUNCTION__, "akinator/akinator.cpp", 1067, logs_file);
        _buffer_dump(buffer_struct, __FUNCTION__, "akinator/akinator.cpp", 1068, logs_file);
        return -1;
    }

    if (symb != '{') {

        _error_report(TREE_TEXT_INV_SYNTAXIS, __FUNCTION__, "akinator/akinator.cpp", 1074, logs_file);
        _buffer_dump(buffer_struct, __FUNCTION__, "akinator/akinator.cpp", 1075, logs_file);
        return -1;
    }

    buffer_struct->pos += offset;
    const char* node_data = buffer_struct->buffer + buffer_struct->pos;

    symb = 0;
    int after_word = 0;
    int before_word = 0;

    while (symb != '{' && symb != '}') {

        int ret = sscanf(buffer_struct->buffer + buffer_struct->pos, " %n%*s%n %n%c",
                                                                        &before_word,
                                                                         &after_word,
                                                                             &offset,
                                                                              &symb);

        if (ret != 1) {

            _error_report(TREE_TEXT_INV_SYNTAXIS, __FUNCTION__, "akinator/akinator.cpp", 1096, logs_file);
            _buffer_dump(buffer_struct, __FUNCTION__, "akinator/akinator.cpp", 1097, logs_file);
            return -1;
        }

        if (*(buffer_struct->buffer + buffer_struct->pos + before_word) == '{'
         || *(buffer_struct->buffer + buffer_struct->pos + before_word) == '}') {

            _error_report(TREE_TEXT_EMPTY_NODE_NAME, __FUNCTION__, "akinator/akinator.cpp", 1104, logs_file);
            _buffer_dump(buffer_struct, __FUNCTION__, "akinator/akinator.cpp", 1105, logs_file);
            return -1;
        }

        buffer_struct->pos += offset;

    }

    *(buffer_struct->buffer + buffer_struct->pos - offset + after_word) = '\0';
    _node_init(node, node_data, __FUNCTION__, "akinator/akinator.cpp", 1114, logs_file);

    if (*(buffer_struct->buffer + buffer_struct->pos) == '}') {

        buffer_struct->pos++;
        return 0;
    }


    if (*(buffer_struct->buffer + buffer_struct->pos) == '{') {

        node->special_flag = 1;

        int ret = _node_add_sons(node, __FUNCTION__, "akinator/akinator.cpp", 1127, logs_file);
        if (ret == -1)
            return -1;

        ret = _node_read_from_buffer(node->right_son, buffer_struct, __FUNCTION__, "akinator/akinator.cpp", 1131, logs_file);
        if (ret == -1)
            return -1;

        ret = _node_read_from_buffer(node->left_son, buffer_struct, __FUNCTION__, "akinator/akinator.cpp", 1135, logs_file);
        if (ret == -1)
            return -1;

        sscanf(buffer_struct->buffer + buffer_struct->pos, " %c %n",
                                                    &symb, &offset);

        if (symb == '}') {

            buffer_struct->pos += offset;
            return 0;
        }

        else {

            _error_report(TREE_TEXT_NO_CLOSING_BRACKET, __FUNCTION__, "akinator/akinator.cpp", 1150, logs_file);
            _buffer_dump(buffer_struct, __FUNCTION__, "akinator/akinator.cpp", 1151, logs_file);
            return -1;
        }

    }

    return 0;
}
